# This file was automatically generated by gh-aw. DO NOT EDIT.
# To update this file, edit the corresponding .md file and run:
#   gh aw compile

name: "Go Module Guardian"
on:
    pull_request:
        # draft: false # Draft filtering applied via job conditions
        paths:
            - go.mod
            - go.sum
    workflow_dispatch: null

permissions: {}

concurrency:
  group: "gh-aw-${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

run-name: "Go Module Guardian"

# Cache configuration from frontmatter was processed and added to the main job steps

jobs:
  task:
    if: (github.event_name != 'pull_request') || (github.event.pull_request.draft == false)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          fetch-depth: 1

  go-module-guardian:
    needs: task
    runs-on: ubuntu-latest
    permissions:
        contents: read
        issues: read
        pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Cache configuration from frontmatter processed below
      - name: Cache (go-mod-search)
        uses: actions/cache@v3
        with:
          key: go-mod-search
          path: go-mod-search
      - name: Setup MCPs
        run: |
          mkdir -p /tmp/mcp-config
          cat > /tmp/mcp-config/mcp-servers.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "docker",
                "args": [
                  "run",
                  "-i",
                  "--rm",
                  "-e",
                  "GITHUB_PERSONAL_ACCESS_TOKEN",
                  "ghcr.io/github/github-mcp-server:sha-45e90ae"
                ],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF
      - name: Create prompt
        run: |
          mkdir -p /tmp/aw-prompts
          cat > /tmp/aw-prompts/prompt.txt << 'EOF'
          # Go Module Guardian
          
          Your name is "${{ github.workflow }}". You are a specialized Go dependency analysis agent for the GitHub repository `${{ env.GITHUB_REPOSITORY }}`. Your job is to perform deep analysis of changes to `go.mod` and `go.sum` files in pull requests to ensure dependency updates are safe, appropriate, and necessary.
          
          ## Your Mission
          
          When changes to `go.mod` or `go.sum` files are detected in PR #${{ github.event.pull_request.number }}, perform comprehensive analysis and provide detailed feedback to help maintainers understand the implications of the dependency changes.
          
          ## Analysis Steps
          
          1. **Retrieve PR Information:**
             - Get the pull request details using `get_pull_request`
             - Get the list of changed files using `get_pull_request_files`
             - Get the specific diff for go.mod and go.sum using `get_pull_request_diff`
          
          2. **Analyze Dependency Changes:**
             - Identify which dependencies were added, updated, or removed
             - Check if go.sum changes are consistent with go.mod changes
             - Look for major version bumps that might introduce breaking changes
             - Identify any new transitive dependencies introduced
          
          3. **Security and Compatibility Assessment:**
             - Use the `go-mod-search` directory to cache research results for dependencies
             - Research each changed dependency for known security vulnerabilities
             - Check if dependencies are from trusted sources/maintainers
             - Verify compatibility with Go version requirements
             - Look for any deprecated or unmaintained packages
             - Store investigation results in `go-mod-search/` for future reference
          
          4. **Impact Analysis:**
             - Assess the scope of changes (direct vs transitive dependencies)
             - Identify potential breaking changes in updated packages
             - Check if the changes align with the stated purpose of the PR
             - Evaluate if all changes are necessary for the PR's goals
          
          5. **Generate Comprehensive Report:**
             - Create a detailed comment summarizing all findings
             - Include specific recommendations for each dependency change
             - Highlight any security concerns or compatibility issues
             - Provide actionable next steps for the PR author
          
          ## Comment Format
          
          Structure your analysis comment as follows:
          
          ```markdown
          ## 🔍 Go Module Guardian Analysis
          
          ### Summary
          [Brief overview of changes detected]
          
          ### Dependency Changes
          - **Added:** [list new dependencies]
          - **Updated:** [list updated dependencies with version changes]
          - **Removed:** [list removed dependencies]
          
          ### Security Assessment
          [Analysis of security implications]
          
          ### Compatibility Review
          [Assessment of compatibility and breaking changes]
          
          ### Recommendations
          - ✅ [Approved changes with reasoning]
          - ⚠️ [Changes requiring attention]
          - ❌ [Changes that should be reconsidered]
          
          ### Next Steps
          [Specific actionable recommendations]
          ```
          
          ## Important Guidelines
          
          - Focus only on go.mod and go.sum changes - ignore other files in the PR
          - Be thorough but concise in your analysis
          - Provide specific version numbers and package names
          - Include links to security advisories or compatibility documentation when relevant
          - If no issues are found, clearly state that the changes appear safe
          - Always explain your reasoning for recommendations
          
          > NOTE: If you are refused permission to run an MCP tool or particular 'bash' commands, or need to request access to other tools or resources, then please include a request for access in the output, explaining the exact name of the tool and/or the exact prefix of bash commands needed, or other resources you need access to.
          
          > NOTE: Include a footer link like this at the end of each new issue, issue comment or pull request you create. Do this in addition to any other footers you are instructed to include.
          
          ```markdown
          > AI-generated content by [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may contain mistakes.
          ```
          
          ### Output Report implemented via GitHub Action Job Summary
          
          You will use the Job Summary for GitHub Actions run ${{ github.run_id }} in ${{ github.repository }} to report progess. This means writing to the special file $GITHUB_STEP_SUMMARY. You can write the file using "echo" or the "Write" tool. GITHUB_STEP_SUMMARY is an environment variable set by GitHub Actions which you can use to write the report. You can read this environment variable using the bash command "echo $GITHUB_STEP_SUMMARY".
          
          At the end of the workflow, finalize the job summry with a very, very succinct summary in note form of 
            - the steps you took
            - the problems you found
            - the actions you took
            - the exact bash commands you executed
            - the exact web searches you performed
            - the exact MCP function/tool calls you used
            - if any MCP or other tools were refused, then the exact name of the tool and/or the exact prefix of bash commands needed
          
          If any step fails, then make this really obvious with emoji. You should still finalize the job summary with an explanation of what was attempted and why it failed.
          
          Include this at the end of the job summary:
          
            ```
            > AI-generated content by [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may contain mistakes.
            ```
          
          EOF
      - name: Print prompt to step summary
        run: |
          echo "## Generated Prompt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '``````markdown' >> $GITHUB_STEP_SUMMARY
          cat /tmp/aw-prompts/prompt.txt >> $GITHUB_STEP_SUMMARY
          echo '``````' >> $GITHUB_STEP_SUMMARY
      - name: Generate agentic run info
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            const awInfo = {
              engine_id: "claude",
              engine_name: "Claude Code",
              model: "",
              version: "",
              workflow_name: "Go Module Guardian",
              experimental: false,
              supports_tools_whitelist: true,
              supports_http_transport: true,
              run_id: context.runId,
              run_number: context.runNumber,
              run_attempt: process.env.GITHUB_RUN_ATTEMPT,
              repository: context.repo.owner + '/' + context.repo.repo,
              ref: context.ref,
              sha: context.sha,
              actor: context.actor,
              event_name: context.eventName,
              created_at: new Date().toISOString()
            };
            
            fs.writeFileSync('aw_info.json', JSON.stringify(awInfo, null, 2));
            console.log('Generated aw_info.json:');
            console.log(JSON.stringify(awInfo, null, 2));
      - name: Execute Claude Code Action
        id: agentic_execution
        uses: anthropics/claude-code-base-action@v0.0.56
        with:
          # Allowed tools (sorted):
          # - Bash(echo:*)
          # - Edit
          # - Glob
          # - Grep
          # - LS
          # - MultiEdit
          # - NotebookRead
          # - Read
          # - Task
          # - WebFetch
          # - WebSearch
          # - Write
          # - mcp__github__add_issue_comment
          # - mcp__github__download_workflow_run_artifact
          # - mcp__github__get_code_scanning_alert
          # - mcp__github__get_commit
          # - mcp__github__get_dependabot_alert
          # - mcp__github__get_discussion
          # - mcp__github__get_discussion_comments
          # - mcp__github__get_file_contents
          # - mcp__github__get_issue
          # - mcp__github__get_issue_comments
          # - mcp__github__get_job_logs
          # - mcp__github__get_me
          # - mcp__github__get_notification_details
          # - mcp__github__get_pull_request
          # - mcp__github__get_pull_request_comments
          # - mcp__github__get_pull_request_diff
          # - mcp__github__get_pull_request_files
          # - mcp__github__get_pull_request_reviews
          # - mcp__github__get_pull_request_status
          # - mcp__github__get_secret_scanning_alert
          # - mcp__github__get_tag
          # - mcp__github__get_workflow_run
          # - mcp__github__get_workflow_run_logs
          # - mcp__github__get_workflow_run_usage
          # - mcp__github__list_branches
          # - mcp__github__list_code_scanning_alerts
          # - mcp__github__list_commits
          # - mcp__github__list_dependabot_alerts
          # - mcp__github__list_discussion_categories
          # - mcp__github__list_discussions
          # - mcp__github__list_issues
          # - mcp__github__list_notifications
          # - mcp__github__list_pull_requests
          # - mcp__github__list_secret_scanning_alerts
          # - mcp__github__list_tags
          # - mcp__github__list_workflow_jobs
          # - mcp__github__list_workflow_run_artifacts
          # - mcp__github__list_workflow_runs
          # - mcp__github__list_workflows
          # - mcp__github__search_code
          # - mcp__github__search_issues
          # - mcp__github__search_orgs
          # - mcp__github__search_pull_requests
          # - mcp__github__search_repositories
          # - mcp__github__search_users
          allowed_tools: "Bash(echo:*),Edit,Glob,Grep,LS,MultiEdit,NotebookRead,Read,Task,WebFetch,WebSearch,Write,mcp__github__add_issue_comment,mcp__github__download_workflow_run_artifact,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_dependabot_alert,mcp__github__get_discussion,mcp__github__get_discussion_comments,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_job_logs,mcp__github__get_me,mcp__github__get_notification_details,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_tag,mcp__github__get_workflow_run,mcp__github__get_workflow_run_logs,mcp__github__get_workflow_run_usage,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_dependabot_alerts,mcp__github__list_discussion_categories,mcp__github__list_discussions,mcp__github__list_issues,mcp__github__list_notifications,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_tags,mcp__github__list_workflow_jobs,mcp__github__list_workflow_run_artifacts,mcp__github__list_workflow_runs,mcp__github__list_workflows,mcp__github__search_code,mcp__github__search_issues,mcp__github__search_orgs,mcp__github__search_pull_requests,mcp__github__search_repositories,mcp__github__search_users"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          claude_env: |
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          mcp_config: /tmp/mcp-config/mcp-servers.json
          prompt_file: /tmp/aw-prompts/prompt.txt
          timeout_minutes: 10
      - name: Capture Agentic Action logs
        if: always()
        run: |
          # Copy the detailed execution file from Agentic Action if available
          if [ -n "${{ steps.agentic_execution.outputs.execution_file }}" ] && [ -f "${{ steps.agentic_execution.outputs.execution_file }}" ]; then
            cp ${{ steps.agentic_execution.outputs.execution_file }} /tmp/go-module-guardian.log
          else
            echo "No execution file output found from Agentic Action" >> /tmp/go-module-guardian.log
          fi
          
          # Ensure log file exists
          touch /tmp/go-module-guardian.log
      - name: Check if workflow-complete.txt exists, if so upload it
        id: check_file
        run: |
          if [ -f workflow-complete.txt ]; then
            echo "File exists"
            echo "upload=true" >> $GITHUB_OUTPUT
          else
            echo "File does not exist"
            echo "upload=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload workflow-complete.txt
        if: steps.check_file.outputs.upload == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: workflow-complete
          path: workflow-complete.txt
      - name: Upload agentic engine logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: go-module-guardian.log
          path: /tmp/go-module-guardian.log
          if-no-files-found: warn
      - name: Upload agentic run info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aw_info.json
          path: aw_info.json
          if-no-files-found: warn

