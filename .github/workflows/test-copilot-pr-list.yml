---
name: Test gh pr/search commands with --author "@copilot"
on:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  test-author-filter:
    runs-on: ubuntu-latest
    steps:
      - name: Test gh pr list and gh search prs with different author syntaxes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          echo "======================================================"
          echo "Testing gh pr list and gh search prs author filters"
          echo "Repository: $REPO"
          echo "======================================================"
          echo ""
          
          # Test 1: @copilot
          echo "Test 1: gh pr list --author \"@copilot\""
          echo "------------------------------------------------------"
          gh pr list --repo "$REPO" \
            --author "@copilot" \
            --limit 10 \
            --state all \
            --json number,title,author \
            > /tmp/test1.json 2>&1 || echo "Failed with exit code $?"
          
          if [ -f /tmp/test1.json ]; then
            COUNT1=$(jq 'length' /tmp/test1.json 2>/dev/null || echo "0")
            echo "Found $COUNT1 PRs"
            echo "Sample:"
            jq '.[0:2] | .[] | {number, title, author: .author.login}' /tmp/test1.json 2>/dev/null || echo "No results"
          fi
          echo ""
          
          # Test 2: copilot (lowercase, no @)
          echo "Test 2: gh pr list --author \"copilot\""
          echo "------------------------------------------------------"
          gh pr list --repo "$REPO" \
            --author "copilot" \
            --limit 10 \
            --state all \
            --json number,title,author \
            > /tmp/test2.json 2>&1 || echo "Failed with exit code $?"
          
          if [ -f /tmp/test2.json ]; then
            COUNT2=$(jq 'length' /tmp/test2.json 2>/dev/null || echo "0")
            echo "Found $COUNT2 PRs"
            echo "Sample:"
            jq '.[0:2] | .[] | {number, title, author: .author.login}' /tmp/test2.json 2>/dev/null || echo "No results"
          fi
          echo ""
          
          # Test 3: Copilot (capitalized)
          echo "Test 3: gh pr list --author \"Copilot\""
          echo "------------------------------------------------------"
          gh pr list --repo "$REPO" \
            --author "Copilot" \
            --limit 10 \
            --state all \
            --json number,title,author \
            > /tmp/test3.json 2>&1 || echo "Failed with exit code $?"
          
          if [ -f /tmp/test3.json ]; then
            COUNT3=$(jq 'length' /tmp/test3.json 2>/dev/null || echo "0")
            echo "Found $COUNT3 PRs"
            echo "Sample:"
            jq '.[0:2] | .[] | {number, title, author: .author.login}' /tmp/test3.json 2>/dev/null || echo "No results"
          fi
          echo ""
          
          # Test 4: Full list + manual filter (baseline)
          echo "Test 4: gh pr list (all) + jq filter"
          echo "------------------------------------------------------"
          gh pr list --repo "$REPO" \
            --limit 100 \
            --state all \
            --json number,title,author \
            > /tmp/test4-raw.json 2>&1 || echo "Failed with exit code $?"
          
          if [ -f /tmp/test4-raw.json ]; then
            jq '[.[] | select(.author.login == "Copilot" or .author.id == 198982749)]' \
              /tmp/test4-raw.json > /tmp/test4.json 2>/dev/null || echo "jq filter failed"
            
            COUNT4=$(jq 'length' /tmp/test4.json 2>/dev/null || echo "0")
            echo "Found $COUNT4 PRs with author.login == \"Copilot\""
            echo "Sample:"
            jq '.[0:2] | .[] | {number, title, author: .author.login}' /tmp/test4.json 2>/dev/null || echo "No results"
          fi
          echo ""
          
          # Test 5: gh search prs with --author flag (NEW DISCOVERY)
          echo "Test 5: gh search prs --author \"@copilot\" (NEW)"
          echo "------------------------------------------------------"
          gh search prs --repo "$REPO" \
            --author "@copilot" \
            --limit 10 \
            --json number,title,author \
            > /tmp/test5.json 2>&1 || echo "Failed with exit code $?"
          
          if [ -f /tmp/test5.json ]; then
            COUNT5=$(jq 'length' /tmp/test5.json 2>/dev/null || echo "0")
            echo "Found $COUNT5 PRs with --author \"@copilot\""
            echo "Sample:"
            jq '.[0:2] | .[] | {number, title, author: .author.login}' /tmp/test5.json 2>/dev/null || echo "No results"
          fi
          echo ""
          
          # Test 6: gh search prs with --author "Copilot" (capitalized)
          echo "Test 6: gh search prs --author \"Copilot\""
          echo "------------------------------------------------------"
          gh search prs --repo "$REPO" \
            --author "Copilot" \
            --limit 10 \
            --json number,title,author \
            > /tmp/test6.json 2>&1 || echo "Failed with exit code $?"
          
          if [ -f /tmp/test6.json ]; then
            COUNT6=$(jq 'length' /tmp/test6.json 2>/dev/null || echo "0")
            echo "Found $COUNT6 PRs with --author \"Copilot\""
            echo "Sample:"
            jq '.[0:2] | .[] | {number, title, author: .author.login}' /tmp/test6.json 2>/dev/null || echo "No results"
          fi
          echo ""
          
          # Test 7: gh search prs + jq (current workflow approach)
          echo "Test 7: gh search prs + jq filter (current workflow)"
          echo "------------------------------------------------------"
          DATE_30_DAYS_AGO=$(date -d '30 days ago' '+%Y-%m-%d' 2>/dev/null || date -v-30d '+%Y-%m-%d')
          
          gh search prs "repo:$REPO created:>=$DATE_30_DAYS_AGO" \
            --limit 100 \
            --json number,title,author \
            > /tmp/test7-raw.json 2>&1 || echo "Failed with exit code $?"
          
          if [ -f /tmp/test7-raw.json ]; then
            jq '[.[] | select(.author.login == "Copilot" or .author.id == 198982749)]' \
              /tmp/test7-raw.json > /tmp/test7.json 2>/dev/null || echo "jq filter failed"
            
            COUNT7=$(jq 'length' /tmp/test7.json 2>/dev/null || echo "0")
            echo "Found $COUNT7 PRs in last 30 days with author.login == \"Copilot\""
            echo "Sample:"
            jq '.[0:2] | .[] | {number, title, author: .author.login}' /tmp/test7.json 2>/dev/null || echo "No results"
          fi
          echo ""
          
          # Summary comparison
          echo "======================================================"
          echo "SUMMARY COMPARISON"
          echo "======================================================"
          echo "gh pr list approaches:"
          echo "  Test 1 (--author \"@copilot\"):        $COUNT1 PRs"
          echo "  Test 2 (--author \"copilot\"):         $COUNT2 PRs"
          echo "  Test 3 (--author \"Copilot\"):         $COUNT3 PRs"
          echo ""
          echo "gh search prs approaches:"
          echo "  Test 5 (--author \"@copilot\"):        $COUNT5 PRs (NEW)"
          echo "  Test 6 (--author \"Copilot\"):         $COUNT6 PRs (NEW)"
          echo "  Test 7 (query + jq filter):          $COUNT7 PRs (current)"
          echo ""
          echo "Baseline:"
          echo "  Test 4 (full list + jq filter):      $COUNT4 PRs"
          echo ""
          
          # Compare results
          echo "======================================================"
          echo "DETAILED COMPARISON"
          echo "======================================================"
          
          if [ -f /tmp/test1.json ] && [ -f /tmp/test4.json ]; then
            echo "Comparing Test 1 vs Test 4 (baseline):"
            DIFF14=$(diff <(jq -r '.[].number' /tmp/test1.json | sort) <(jq -r '.[].number' /tmp/test4.json | head -10 | sort) 2>/dev/null || echo "Different")
            if [ -z "$DIFF14" ]; then
              echo "‚úÖ Test 1 matches baseline (first 10 results)"
            else
              echo "‚ùå Test 1 differs from baseline"
              echo "$DIFF14"
            fi
          fi
          echo ""
          
          if [ -f /tmp/test3.json ] && [ -f /tmp/test4.json ]; then
            echo "Comparing Test 3 vs Test 4 (baseline):"
            DIFF34=$(diff <(jq -r '.[].number' /tmp/test3.json | sort) <(jq -r '.[].number' /tmp/test4.json | head -10 | sort) 2>/dev/null || echo "Different")
            if [ -z "$DIFF34" ]; then
              echo "‚úÖ Test 3 matches baseline (first 10 results)"
            else
              echo "‚ùå Test 3 differs from baseline"
              echo "$DIFF34"
            fi
          fi
          echo ""
          
          # Final recommendation
          echo "======================================================"
          echo "RECOMMENDATION"
          echo "======================================================"
          
          if [ "$COUNT5" -gt 0 ] || [ "$COUNT6" -gt 0 ]; then
            echo "üéâ BEST OPTION: gh search prs --author works!"
            echo ""
            echo "‚úÖ gh search prs --author \"@copilot\" (or \"Copilot\")"
            echo "   - Server-side filtering"
            echo "   - Up to 1000 results"
            echo "   - No jq needed!"
            echo ""
            echo "This is simpler and more efficient than current approach."
          fi
          
          if [ "$COUNT1" -gt 0 ] || [ "$COUNT3" -gt 0 ]; then
            echo ""
            echo "‚úÖ gh pr list --author also works (limited to 100 results)"
            echo "   - Good for quick queries"
            echo "   - Client-side filtering"
          fi
          
          if [ "$COUNT7" -gt 0 ]; then
            echo ""
            echo "‚ö†Ô∏è  Current approach (gh search prs + jq) works but is more complex"
            echo "   - Consider switching to gh search prs --author"
          fi
