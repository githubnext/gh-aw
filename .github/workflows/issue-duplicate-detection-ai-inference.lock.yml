# This file was automatically generated by gh-aw. DO NOT EDIT.
# To update this file, edit the corresponding .md file and run:
#   gh aw compile

name: "Issue Duplicate Detection with AI Inference"
on:
    issues:
        types:
            - opened

permissions: {}

concurrency:
  group: "gh-aw-${{ github.workflow }}"

run-name: "Issue Duplicate Detection with AI Inference"

jobs:
  task:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      text: ${{ steps.compute-text.outputs.text }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          fetch-depth: 1
      - name: Compute current body text
        id: compute-text
        uses: ./.github/actions/compute-text

  add-reaction:
    needs: task
    if: github.event_name == 'issues' || github.event_name == 'pull_request' || github.event_name == 'issue_comment' || github.event_name == 'pull_request_comment' || github.event_name == 'pull_request_review_comment'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Read .github
      issues: write
      pull-requests: write
    outputs:
      reaction_id: ${{ steps.react.outputs.reaction-id }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github
      - name: Add eyes reaction to the triggering item
        id: react
        uses: ./.github/actions/reaction
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          mode: add
          reaction: eyes

  issue-duplicate-detection-with-ai-inference:
    needs: task
    runs-on: ubuntu-latest
    permissions:
        contents: read
        issues: write
        models: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup MCPs
        run: |
          mkdir -p /tmp/mcp-config
          cat > /tmp/mcp-config/mcp-servers.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "docker",
                "args": [
                  "run",
                  "-i",
                  "--rm",
                  "-e",
                  "GITHUB_PERSONAL_ACCESS_TOKEN",
                  "ghcr.io/github/github-mcp-server:sha-45e90ae"
                ],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF
      - name: Create prompt
        run: |
          mkdir -p /tmp/aw-prompts
          cat > /tmp/aw-prompts/prompt.txt << 'EOF'
          # Issue Duplicate Detection with AI Inference
          
          You are a duplicate detection assistant for GitHub issues. Your task is to analyze the newly created issue #${{ github.event.issue.number }} and search for potential duplicates among existing issues.
          
          ## Your Tasks
          
          1. **Get the issue details**: Use the `get_issue` tool to retrieve the full content of issue #${{ github.event.issue.number }}, including title, body, and labels.
          
          2. **Analyze the issue**: Extract key information from the issue:
             - Main topic or problem described
             - Technical components mentioned (e.g., specific features, APIs, files)
             - Error messages or symptoms
             - Use cases or scenarios
             - Keywords and technical terms
          
          3. **Search for similar issues**: Use the `search_issues` tool to find potentially related issues. Try multiple search strategies:
             - Search using key terms from the title
             - Search using technical components mentioned
             - Search using error messages (if any)
             - Search using broader topic keywords
             - Focus on **open** issues as primary candidates, but also check closed issues
          
          4. **Evaluate candidates**: For each potential duplicate found:
             - Compare the core problem being reported
             - Check if the technical context is similar
             - Consider if the symptoms or errors match
             - Determine similarity confidence (High, Medium, Low)
          
          5. **Post findings**: Add a comment to the issue with your analysis:
             - Start with "üîç **Duplicate Detection Analysis**"
             - If potential duplicates found:
               - List them with similarity confidence levels
               - Briefly explain why each might be related
               - Provide direct links to the issues
             - If no clear duplicates found:
               - Mention that you searched for duplicates
               - Note that this appears to be a new unique issue
             - Keep the comment helpful and non-judgmental
             - Use clear, organized formatting
          
          ## Important Guidelines
          
          - Only flag issues as potential duplicates if there's a clear similarity in the core problem
          - Include both open AND closed issues in your search, but prioritize open ones
          - Be conservative - it's better to miss a duplicate than to incorrectly flag one
          - Provide enough context so maintainers can quickly assess your findings
          - Focus on the technical substance, not just keyword matches
          
          ## Example Comment Format
          
          ```markdown
          üîç **Duplicate Detection Analysis**
          
          I searched for similar issues and found the following potential duplicates:
          
          **High Confidence:**
          - #123 - [Title] - Very similar problem with [specific technical detail]
          
          **Medium Confidence:**  
          - #456 - [Title] - Related to [shared component] but different symptoms
          
          **Low Confidence:**
          - #789 - [Title] - Mentions [keyword] but appears to be different issue
          
          If none of these match your specific case, this appears to be a new unique issue. Thank you for the detailed report!
          ```
          
          > NOTE: If you are refused permission to run an MCP tool or particular 'bash' commands, or need to request access to other tools or resources, then please include a request for access in the output, explaining the exact name of the tool and/or the exact prefix of bash commands needed, or other resources you need access to.
          
          > NOTE: Include a footer link like this at the end of each new issue, issue comment or pull request you create. Do this in addition to any other footers you are instructed to include.
          
          ```markdown
          > AI-generated content by [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may contain mistakes.
          ```
          
          ## Issue and Pull Request Result Posting
          
          This shared component provides comprehensive guidance for posting workflow results back to the triggering issue or pull request.
          
          ### Result Posting Strategy
          
          Always post your workflow results as a comment on the issue or pull request that triggered the workflow:
          
          - **For Issues**: Use `add_issue_comment` to post on issue #${{ github.event.issue.number }}
          - **For Pull Requests**: Use `add_pull_request_comment` to post on PR #${{ github.event.pull_request.number }}
          
          ### Content Guidelines
          
          #### Be Concise but Complete
          - **Lead with outcomes**: Start with what was accomplished or discovered
          - **Provide actionable insights**: Include concrete next steps or recommendations
          - **Use collapsible sections**: Keep the main comment scannable while providing full details
          - **Link to workflow run**: Always include the action run link for complete logs
          
          #### Focus Areas
          - **Primary findings**: What was discovered, completed, or recommended
          - **Context**: How this relates to the original request or issue
          - **Next steps**: Clear actions the team can take based on your results
          - **Resources**: Relevant links, documentation, or related issues
          
          #### Avoid Common Pitfalls
          - Don't create excessively long comments that are hard to scan
          - Don't duplicate information already available in the workflow logs
          - Don't include internal workflow details unless relevant to users
          - Don't use excessive formatting or emoji that distracts from content
          
          ### Security in Results
          
          When posting results:
          - **Sanitize content**: Don't echo back potentially malicious content from issues
          - **Focus on your analysis**: Present your findings rather than repeating user input
          - **Maintain objectivity**: Provide balanced analysis and recommendations
          - **Respect privacy**: Don't expose internal system details unnecessarily
          
          ### Error Reporting
          
          When workflows encounter errors:
          
          ```markdown
          ‚ùå Unable to complete [workflow task]
          
          I encountered an issue while [specific problem description]. 
          
          **What happened**: [Brief explanation of the error]
          **Impact**: [What this means for the request]  
          **Next steps**: [How to proceed or get help]
          
          [üìã View error details and logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          ```
          
          ### Result Posting Best Practices
          
          1. **Always post results**: Even for errors or partial completion
          2. **Be user-focused**: Write for the person who will read the comment
          3. **Include workflow context**: Link back to the full run for transparency
          4. **Maintain consistency**: Use similar formatting across different workflows
          5. **Respect the conversation**: Add to the discussion constructively
          6. **Time-sensitive updates**: Post results promptly while context is fresh
          
          ### Integration with Job Summary
          
          Results posted here should complement the GitHub Actions job summary:
          - **Comment**: User-focused, concise summary for issue participants
          - **Job Summary**: Technical details, full analysis, logs for developers
          
          Both should reference each other for complete transparency.
          
          ### Output Report implemented via GitHub Action Job Summary
          
          You will use the Job Summary for GitHub Actions run ${{ github.run_id }} in ${{ github.repository }} to report progess. This means writing to the special file $GITHUB_STEP_SUMMARY. You can write the file using "echo" or the "Write" tool. GITHUB_STEP_SUMMARY is an environment variable set by GitHub Actions which you can use to write the report. You can read this environment variable using the bash command "echo $GITHUB_STEP_SUMMARY".
          
          At the end of the workflow, finalize the job summry with a very, very succinct summary in note form of 
            - the steps you took
            - the problems you found
            - the actions you took
            - the exact bash commands you executed
            - the exact web searches you performed
            - the exact MCP function/tool calls you used
            - if any MCP or other tools were refused, then the exact name of the tool and/or the exact prefix of bash commands needed
          
          If any step fails, then make this really obvious with emoji. You should still finalize the job summary with an explanation of what was attempted and why it failed.
          
          Include this at the end of the job summary:
          
            ```
            > AI-generated content by [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may contain mistakes.
            ```
          
          EOF
      - name: Print prompt to step summary
        run: |
          echo "## Generated Prompt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '``````markdown' >> $GITHUB_STEP_SUMMARY
          cat /tmp/aw-prompts/prompt.txt >> $GITHUB_STEP_SUMMARY
          echo '``````' >> $GITHUB_STEP_SUMMARY
      - name: Execute AI Inference Action
        id: agentic_execution
        uses: actions/ai-inference@v1
        with:
          max-tokens: 2000
          mcp-config: /tmp/mcp-config/mcp-servers.json
          model: openai/gpt-4o
          prompt-file: /tmp/aw-prompts/prompt.txt
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Capture Agentic Action logs
        if: always()
        run: |
          # Copy the detailed execution file from Agentic Action if available
          if [ -n "${{ steps.agentic_execution.outputs.execution_file }}" ] && [ -f "${{ steps.agentic_execution.outputs.execution_file }}" ]; then
            cp ${{ steps.agentic_execution.outputs.execution_file }} /tmp/issue-duplicate-detection-with-ai-inference.log
          else
            echo "No execution file output found from Agentic Action" >> /tmp/issue-duplicate-detection-with-ai-inference.log
          fi
          
          # Ensure log file exists
          touch /tmp/issue-duplicate-detection-with-ai-inference.log
      - name: Check if workflow-complete.txt exists, if so upload it
        id: check_file
        run: |
          if [ -f workflow-complete.txt ]; then
            echo "File exists"
            echo "upload=true" >> $GITHUB_OUTPUT
          else
            echo "File does not exist"
            echo "upload=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload workflow-complete.txt
        if: steps.check_file.outputs.upload == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: workflow-complete
          path: workflow-complete.txt
      - name: Upload agentic engine logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: issue-duplicate-detection-with-ai-inference.log
          path: /tmp/issue-duplicate-detection-with-ai-inference.log
          if-no-files-found: warn

