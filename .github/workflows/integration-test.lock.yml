# This file was automatically generated by gh-aw. DO NOT EDIT.
# To update this file, edit the corresponding .md file and run:
#   gh aw compile

name: "GitHub Agentic Workflows Integration Test"
on:
    pull_request:
        types:
            - ready_for_review
    push:
        branches:
            - main
    workflow_dispatch: null

permissions: {}

concurrency:
  group: "gh-aw-${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

run-name: "GitHub Agentic Workflows Integration Test"

jobs:
  task:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          fetch-depth: 1

  github-agentic-workflows-integration-test:
    needs: task
    runs-on: ubuntu-latest
    permissions:
        actions: read
        checks: read
        contents: read
        discussions: read
        issues: read
        models: read
        pull-requests: read
        statuses: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup MCPs
        run: |
          mkdir -p /tmp/mcp-config
          cat > /tmp/mcp-config/mcp-servers.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "docker",
                "args": [
                  "run",
                  "-i",
                  "--rm",
                  "-e",
                  "GITHUB_PERSONAL_ACCESS_TOKEN",
                  "ghcr.io/github/github-mcp-server:sha-45e90ae"
                ],
                "env": {
                  "GITHUB_PERSONAL_ACCESS_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF
      - name: Create prompt
        run: |
          mkdir -p /tmp/aw-prompts
          cat > /tmp/aw-prompts/prompt.txt << 'EOF'
          # GitHub Agentic Workflows Integration Test
          
          This workflow serves as a comprehensive integration test for the GitHub Agentic Workflows (gh-aw) tool. It exercises most available GitHub MCP features and validates connectivity to the GitHub API.
          
          ## Test Objectives
          
          1. **GitHub Issues API Testing**: Query and retrieve the last 2 issues from this repository
          2. **Repository Information Testing**: Test various repository access operations
          3. **Workflow Management Testing**: Test workflow-related API operations
          4. **Feature Coverage Testing**: Exercise a broad range of GitHub MCP tools
          5. **Error Handling**: Fail clearly if operations cannot be performed
          
          ## Integration Test Execution
          
          ### Phase 1: GitHub Issues API Testing
          
          **Critical Test**: Query the last 2 issues from this repository using GitHub MCP.
          
          First, let me retrieve the most recent issues from this repository:
          
          1. List the most recent issues in the repository
          2. Get detailed information for the last 2 issues
          3. Retrieve comments for those issues if they exist
          
          If this fails, the entire test should fail as it's the core requirement.
          
          ### Phase 2: Repository Information Testing
          
          Test various repository access operations:
          
          1. Get repository file contents (README.md)
          2. List recent commits
          3. Get details of the latest commit
          4. List repository branches
          5. Search for code patterns in the repository
          
          ### Phase 3: Pull Request Testing
          
          Test pull request operations:
          
          1. List recent pull requests
          2. Get details of recent PRs if available
          3. Test PR comment retrieval
          
          ### Phase 4: Workflow Management Testing
          
          Test workflow-related operations:
          
          1. List available GitHub Actions workflows
          2. Get recent workflow runs
          3. Test workflow job information retrieval
          
          ### Phase 5: Search and Discovery Testing
          
          Test search capabilities:
          
          1. Search for issues with specific patterns
          2. Search for code in the repository
          3. Test advanced search operations
          
          ## Execution Script
          
          Let me execute these tests systematically:
          
          **Step 1: Test GitHub Issues API (Critical Requirement)**
          
          ```
          Testing GitHub Issues API connectivity and functionality...
          ```
          
          Using the `list_issues` tool to get the most recent issues from this repository. This is the critical test that must succeed.
          
          Using the `get_issue` tool to retrieve detailed information for the last 2 issues.
          
          If issues are found, I'll also test `get_issue_comments` to retrieve any comments.
          
          **Step 2: Repository Information Tests**
          
          Testing repository access using `get_file_contents` to read the README.md file.
          
          Testing commit history using `list_commits` to get recent commits.
          
          Testing branch information using `list_branches`.
          
          **Step 3: Workflow Operations Tests**
          
          Testing workflow information using `list_workflows` to get available workflows.
          
          Testing workflow runs using `list_workflow_runs` for recent executions.
          
          **Step 4: Search Operations Tests**
          
          Testing issue search using `search_issues` with various patterns.
          
          Testing code search using `search_code` to find specific code patterns.
          
          ## Test Results and Reporting
          
          At the end of each test phase, I will report:
          
          - ✅ **SUCCESS**: Operation completed successfully
          - ❌ **FAILURE**: Operation failed (will cause workflow failure)
          - ⚠️ **WARNING**: Operation had issues but didn't fail
          
          ### Final Integration Test Report
          
          I will provide a comprehensive summary including:
          
          1. **GitHub API Connectivity**: Status of GitHub MCP connection
          2. **Issues API Test Results**: Success/failure of the critical requirement
          3. **Feature Coverage**: Which GitHub MCP tools were successfully tested
          4. **Performance Metrics**: Response times and operation success rates
          5. **Error Analysis**: Any failures encountered and their causes
          
          **Integration Test Result**: The workflow will exit with failure status if any critical operations (especially the GitHub Issues API requirement) fail.
          
          ## Workflow Validation
          
          This workflow validates that:
          
          - ✅ GitHub MCP server connectivity is working
          - ✅ Authentication and permissions are properly configured
          - ✅ Core GitHub API operations are functional
          - ✅ The gh-aw tool is properly integrated with GitHub Actions
          - ✅ The last 2 issues can be successfully queried and retrieved
          
          If all tests pass, this confirms that the GitHub Agentic Workflows tool is functioning correctly and can be used for production workflows.
          
          ---
          
          **Note**: This integration test workflow is designed to be comprehensive but safe - it only performs read operations and does not modify any repository data.
          
          EOF
      - name: Print prompt to step summary
        run: |
          echo "## Generated Prompt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '``````markdown' >> $GITHUB_STEP_SUMMARY
          cat /tmp/aw-prompts/prompt.txt >> $GITHUB_STEP_SUMMARY
          echo '``````' >> $GITHUB_STEP_SUMMARY
      - name: Generate agentic run info
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            const awInfo = {
              engine_id: "claude",
              engine_name: "Claude Code",
              model: "",
              version: "",
              workflow_name: "GitHub Agentic Workflows Integration Test",
              experimental: false,
              supports_tools_whitelist: true,
              supports_http_transport: true,
              run_id: context.runId,
              run_number: context.runNumber,
              run_attempt: process.env.GITHUB_RUN_ATTEMPT,
              repository: context.repo.owner + '/' + context.repo.repo,
              ref: context.ref,
              sha: context.sha,
              actor: context.actor,
              event_name: context.eventName,
              created_at: new Date().toISOString()
            };
            
            fs.writeFileSync('aw_info.json', JSON.stringify(awInfo, null, 2));
            console.log('Generated aw_info.json:');
            console.log(JSON.stringify(awInfo, null, 2));
      - name: Execute Claude Code Action
        id: agentic_execution
        uses: anthropics/claude-code-base-action@v0.0.56
        with:
          # Allowed tools (sorted):
          # - Bash(curl --version)
          # - Bash(date)
          # - Bash(echo)
          # - Glob
          # - Grep
          # - LS
          # - NotebookRead
          # - Read
          # - Task
          # - Write
          # - mcp__github__download_workflow_run_artifact
          # - mcp__github__get_code_scanning_alert
          # - mcp__github__get_commit
          # - mcp__github__get_dependabot_alert
          # - mcp__github__get_discussion
          # - mcp__github__get_discussion_comments
          # - mcp__github__get_file_contents
          # - mcp__github__get_issue
          # - mcp__github__get_issue_comments
          # - mcp__github__get_job_logs
          # - mcp__github__get_me
          # - mcp__github__get_notification_details
          # - mcp__github__get_pull_request
          # - mcp__github__get_pull_request_comments
          # - mcp__github__get_pull_request_diff
          # - mcp__github__get_pull_request_files
          # - mcp__github__get_pull_request_reviews
          # - mcp__github__get_pull_request_status
          # - mcp__github__get_secret_scanning_alert
          # - mcp__github__get_tag
          # - mcp__github__get_workflow_run
          # - mcp__github__get_workflow_run_logs
          # - mcp__github__get_workflow_run_usage
          # - mcp__github__list_branches
          # - mcp__github__list_code_scanning_alerts
          # - mcp__github__list_commits
          # - mcp__github__list_dependabot_alerts
          # - mcp__github__list_discussion_categories
          # - mcp__github__list_discussions
          # - mcp__github__list_issues
          # - mcp__github__list_notifications
          # - mcp__github__list_pull_requests
          # - mcp__github__list_secret_scanning_alerts
          # - mcp__github__list_tags
          # - mcp__github__list_workflow_jobs
          # - mcp__github__list_workflow_run_artifacts
          # - mcp__github__list_workflow_runs
          # - mcp__github__list_workflows
          # - mcp__github__search_code
          # - mcp__github__search_issues
          # - mcp__github__search_orgs
          # - mcp__github__search_pull_requests
          # - mcp__github__search_repositories
          # - mcp__github__search_users
          allowed_tools: "Bash(curl --version),Bash(date),Bash(echo),Glob,Grep,LS,NotebookRead,Read,Task,Write,mcp__github__download_workflow_run_artifact,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_dependabot_alert,mcp__github__get_discussion,mcp__github__get_discussion_comments,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_job_logs,mcp__github__get_me,mcp__github__get_notification_details,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_tag,mcp__github__get_workflow_run,mcp__github__get_workflow_run_logs,mcp__github__get_workflow_run_usage,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_dependabot_alerts,mcp__github__list_discussion_categories,mcp__github__list_discussions,mcp__github__list_issues,mcp__github__list_notifications,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_tags,mcp__github__list_workflow_jobs,mcp__github__list_workflow_run_artifacts,mcp__github__list_workflow_runs,mcp__github__list_workflows,mcp__github__search_code,mcp__github__search_issues,mcp__github__search_orgs,mcp__github__search_pull_requests,mcp__github__search_repositories,mcp__github__search_users"
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          claude_env: |
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          mcp_config: /tmp/mcp-config/mcp-servers.json
          prompt_file: /tmp/aw-prompts/prompt.txt
          timeout_minutes: 10
      - name: Capture Agentic Action logs
        if: always()
        run: |
          # Copy the detailed execution file from Agentic Action if available
          if [ -n "${{ steps.agentic_execution.outputs.execution_file }}" ] && [ -f "${{ steps.agentic_execution.outputs.execution_file }}" ]; then
            cp ${{ steps.agentic_execution.outputs.execution_file }} /tmp/github-agentic-workflows-integration-test.log
          else
            echo "No execution file output found from Agentic Action" >> /tmp/github-agentic-workflows-integration-test.log
          fi
          
          # Ensure log file exists
          touch /tmp/github-agentic-workflows-integration-test.log
      - name: Check if workflow-complete.txt exists, if so upload it
        id: check_file
        run: |
          if [ -f workflow-complete.txt ]; then
            echo "File exists"
            echo "upload=true" >> $GITHUB_OUTPUT
          else
            echo "File does not exist"
            echo "upload=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload workflow-complete.txt
        if: steps.check_file.outputs.upload == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: workflow-complete
          path: workflow-complete.txt
      - name: Upload agentic engine logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: github-agentic-workflows-integration-test.log
          path: /tmp/github-agentic-workflows-integration-test.log
          if-no-files-found: warn
      - name: Upload agentic run info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aw_info.json
          path: aw_info.json
          if-no-files-found: warn

