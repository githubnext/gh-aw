# This file was automatically generated by gh-aw. DO NOT EDIT.
# To update this file, edit the corresponding .md file and run:
#   gh aw compile

name: "GenAIScript Issue Duplicate Finder"
on:
    issues:
        types:
            - opened

permissions: {}

concurrency:
  group: "gh-aw-${{ github.workflow }}"

run-name: "GenAIScript Issue Duplicate Finder"

jobs:
  task:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      text: ${{ steps.compute-text.outputs.text }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          fetch-depth: 1
      - name: Compute current body text
        id: compute-text
        uses: ./.github/actions/compute-text

  add-reaction:
    needs: task
    if: github.event_name == 'issues' || github.event_name == 'pull_request' || github.event_name == 'issue_comment' || github.event_name == 'pull_request_comment' || github.event_name == 'pull_request_review_comment'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Read .github
      issues: write
      pull-requests: write
    outputs:
      reaction_id: ${{ steps.react.outputs.reaction-id }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github
      - name: Add eyes reaction to the triggering item
        id: react
        uses: ./.github/actions/reaction
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          mode: add
          reaction: eyes

  genaiscript-issue-duplicate-finder:
    needs: task
    runs-on: ubuntu-latest
    permissions:
        contents: read
        issues: write
        models: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
      - name: Install GenAIScript
        run: npm install -g genaiscript
      - name: Setup MCPs
        run: |
          mkdir -p /tmp/mcp-config
          # Create MCP configuration directory
          mkdir -p /tmp/mcp-config
          
          # Generate MCP servers configuration for GenAIScript
          cat > /tmp/mcp-config/mcp-servers.json << 'EOF'
          {
            "mcpServers": {
              "github": {
                "command": "docker",
                "args": [
                  "run", "--rm",
                  "-e", "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}",
                  "ghcr.io/modelcontextprotocol/servers/github:latest"
                ]
              }

            }
          }
          EOF
          
      - name: Create prompt
        run: |
          mkdir -p /tmp/aw-prompts
          cat > /tmp/aw-prompts/prompt.txt << 'EOF'
          # GenAIScript Issue Duplicate Finder
          
          You are a sophisticated duplicate detection assistant using GenAIScript with deterministic JavaScript logic. Your task is to analyze the newly created issue #${{ github.event.issue.number }} and search for potential duplicates among existing issues.
          
          ## Deterministic Duplicate Detection Logic
          
          ```js
          // Extract key terms and technical components from issue content
          function extractKeyTerms(title, body) {
              const text = `${title} ${body}`.toLowerCase();
              
              // Remove common words and extract meaningful terms
              const stopWords = ['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by'];
              const words = text.match(/\b\w{3,}\b/g) || [];
              
              return words
                  .filter(word => !stopWords.includes(word))
                  .filter(word => word.length >= 3)
                  .reduce((acc, word) => {
                      acc[word] = (acc[word] || 0) + 1;
                      return acc;
                  }, {});
          }
          
          // Generate search queries for finding similar issues
          function generateSearchQueries(keyTerms, title) {
              const sortedTerms = Object.entries(keyTerms)
                  .sort(([,a], [,b]) => b - a)
                  .slice(0, 10)
                  .map(([term]) => term);
              
              return [
                  // Exact title words
                  title.split(' ').filter(word => word.length > 3).slice(0, 5).join(' '),
                  // Most frequent terms
                  sortedTerms.slice(0, 3).join(' '),
                  // Technical terms (likely error messages or API names)
                  sortedTerms.filter(term => 
                      term.includes('error') || 
                      term.includes('api') || 
                      term.includes('exception') ||
                      term.length > 8
                  ).slice(0, 3).join(' ')
              ].filter(query => query.length > 0);
          }
          
          // Calculate similarity score between two issues
          function calculateSimilarity(currentIssue, candidateIssue) {
              const current = extractKeyTerms(currentIssue.title, currentIssue.body || '');
              const candidate = extractKeyTerms(candidateIssue.title, candidateIssue.body || '');
              
              const currentTerms = new Set(Object.keys(current));
              const candidateTerms = new Set(Object.keys(candidate));
              
              // Jaccard similarity
              const intersection = new Set([...currentTerms].filter(x => candidateTerms.has(x)));
              const union = new Set([...currentTerms, ...candidateTerms]);
              
              const jaccardScore = intersection.size / union.size;
              
              // Title similarity bonus
              const titleWords1 = currentIssue.title.toLowerCase().split(' ');
              const titleWords2 = candidateIssue.title.toLowerCase().split(' ');
              const titleSimilarity = titleWords1.filter(word => titleWords2.includes(word)).length / 
                                     Math.max(titleWords1.length, titleWords2.length);
              
              return (jaccardScore * 0.7) + (titleSimilarity * 0.3);
          }
          
          // Classify similarity confidence
          function classifySimilarity(score) {
              if (score >= 0.6) return 'High';
              if (score >= 0.3) return 'Medium';
              if (score >= 0.15) return 'Low';
              return 'None';
          }
          ```
          
          ## Your Tasks
          
          1. **Get the issue details**: Use the `get_issue` tool to retrieve the full content of issue #${{ github.event.issue.number }}, including title, body, and labels.
          
          2. **Analyze the issue**: Apply the JavaScript logic above to extract key information:
             - Extract key terms using the `extractKeyTerms` function
             - Generate targeted search queries using the `generateSearchQueries` function
          
          3. **Search for similar issues**: Use the `search_issues` tool with the generated queries to find potentially related issues. Focus on:
             - **Open issues** as primary candidates for duplicates
             - **Closed issues** that might have been resolved but are still relevant
             - Multiple search strategies using different keyword combinations
          
          4. **Evaluate candidates**: For each potential duplicate found:
             - Apply the `calculateSimilarity` function to get a numerical similarity score
             - Use `classifySimilarity` to determine confidence level (High/Medium/Low)
             - Consider technical context and problem domain
          
          5. **Post findings**: Add a comment with your analysis using this deterministic approach:
          
          ```js
          // Generate the final comment based on findings
          function generateDuplicateComment(similarIssues) {
              let comment = "🔍 **GenAIScript Duplicate Detection Analysis**\n\n";
              
              if (similarIssues.length === 0) {
                  comment += "I searched for similar issues using deterministic text analysis and found no clear duplicates. ";
                  comment += "This appears to be a new unique issue. Thank you for the detailed report!\n\n";
                  comment += "**Analysis Details:**\n";
                  comment += "- Performed multi-strategy keyword search\n";
                  comment += "- Analyzed technical terms and error patterns\n";
                  comment += "- Compared against both open and closed issues\n";
                  return comment;
              }
              
              const grouped = {
                  'High': similarIssues.filter(issue => issue.confidence === 'High'),
                  'Medium': similarIssues.filter(issue => issue.confidence === 'Medium'),
                  'Low': similarIssues.filter(issue => issue.confidence === 'Low')
              };
              
              for (const [confidence, issues] of Object.entries(grouped)) {
                  if (issues.length > 0) {
                      comment += `**${confidence} Confidence:**\n`;
                      for (const issue of issues) {
                          comment += `- #${issue.number} - ${issue.title} (Similarity: ${(issue.score * 100).toFixed(1)}%)\n`;
                          comment += `  *${issue.reason}*\n`;
                      }
                      comment += "\n";
                  }
              }
              
              comment += "**Analysis Method:** Used deterministic JavaScript algorithms for:\n";
              comment += "- Key term extraction and frequency analysis\n";
              comment += "- Multi-strategy search query generation\n";
              comment += "- Jaccard similarity scoring with title weighting\n";
              comment += "- Confidence classification based on numerical thresholds\n";
              
              return comment;
          }
          ```
          
          ## Important Guidelines
          
          - Use the deterministic JavaScript functions provided above for consistent analysis
          - Only flag issues as potential duplicates if similarity score >= 0.15 (Low confidence threshold)
          - Include both open AND closed issues in your search, but prioritize open ones
          - Provide specific similarity scores and reasoning for transparency
          - Focus on technical substance and problem patterns, not just keyword matches
          - Be conservative but thorough in your analysis
          
          ## Repository Context
          
          **Repository**: ${{ github.repository }}  
          **New Issue**: #${{ github.event.issue.number }}  
          **Issue Title**: "${{ github.event.issue.title }}"  
          **Opened by**: ${{ github.actor }}
          
          > NOTE: If you are refused permission to run an MCP tool or particular 'bash' commands, or need to request access to other tools or resources, then please include a request for access in the output, explaining the exact name of the tool and/or the exact prefix of bash commands needed, or other resources you need access to.
          
          > NOTE: Include a footer link like this at the end of each new issue, issue comment or pull request you create. Do this in addition to any other footers you are instructed to include.
          
          ```markdown
          > AI-generated content by [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may contain mistakes.
          ```
          
          ## Issue and Pull Request Result Posting
          
          This shared component provides comprehensive guidance for posting workflow results back to the triggering issue or pull request.
          
          ### Result Posting Strategy
          
          Always post your workflow results as a comment on the issue or pull request that triggered the workflow:
          
          - **For Issues**: Use `add_issue_comment` to post on issue #${{ github.event.issue.number }}
          - **For Pull Requests**: Use `add_pull_request_comment` to post on PR #${{ github.event.pull_request.number }}
          
          ### Content Guidelines
          
          #### Be Concise but Complete
          - **Lead with outcomes**: Start with what was accomplished or discovered
          - **Provide actionable insights**: Include concrete next steps or recommendations
          - **Use collapsible sections**: Keep the main comment scannable while providing full details
          - **Link to workflow run**: Always include the action run link for complete logs
          
          #### Focus Areas
          - **Primary findings**: What was discovered, completed, or recommended
          - **Context**: How this relates to the original request or issue
          - **Next steps**: Clear actions the team can take based on your results
          - **Resources**: Relevant links, documentation, or related issues
          
          #### Avoid Common Pitfalls
          - Don't create excessively long comments that are hard to scan
          - Don't duplicate information already available in the workflow logs
          - Don't include internal workflow details unless relevant to users
          - Don't use excessive formatting or emoji that distracts from content
          
          ### Security in Results
          
          When posting results:
          - **Sanitize content**: Don't echo back potentially malicious content from issues
          - **Focus on your analysis**: Present your findings rather than repeating user input
          - **Maintain objectivity**: Provide balanced analysis and recommendations
          - **Respect privacy**: Don't expose internal system details unnecessarily
          
          ### Error Reporting
          
          When workflows encounter errors:
          
          ```markdown
          ❌ Unable to complete [workflow task]
          
          I encountered an issue while [specific problem description]. 
          
          **What happened**: [Brief explanation of the error]
          **Impact**: [What this means for the request]  
          **Next steps**: [How to proceed or get help]
          
          [📋 View error details and logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          ```
          
          ### Result Posting Best Practices
          
          1. **Always post results**: Even for errors or partial completion
          2. **Be user-focused**: Write for the person who will read the comment
          3. **Include workflow context**: Link back to the full run for transparency
          4. **Maintain consistency**: Use similar formatting across different workflows
          5. **Respect the conversation**: Add to the discussion constructively
          6. **Time-sensitive updates**: Post results promptly while context is fresh
          
          ### Integration with Job Summary
          
          Results posted here should complement the GitHub Actions job summary:
          - **Comment**: User-focused, concise summary for issue participants
          - **Job Summary**: Technical details, full analysis, logs for developers
          
          Both should reference each other for complete transparency.
          
          ### Output Report implemented via GitHub Action Job Summary
          
          You will use the Job Summary for GitHub Actions run ${{ github.run_id }} in ${{ github.repository }} to report progess. This means writing to the special file $GITHUB_STEP_SUMMARY. You can write the file using "echo" or the "Write" tool. GITHUB_STEP_SUMMARY is an environment variable set by GitHub Actions which you can use to write the report. You can read this environment variable using the bash command "echo $GITHUB_STEP_SUMMARY".
          
          At the end of the workflow, finalize the job summry with a very, very succinct summary in note form of 
            - the steps you took
            - the problems you found
            - the actions you took
            - the exact bash commands you executed
            - the exact web searches you performed
            - the exact MCP function/tool calls you used
            - if any MCP or other tools were refused, then the exact name of the tool and/or the exact prefix of bash commands needed
          
          If any step fails, then make this really obvious with emoji. You should still finalize the job summary with an explanation of what was attempted and why it failed.
          
          Include this at the end of the job summary:
          
            ```
            > AI-generated content by [${{ github.workflow }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) may contain mistakes.
            ```
          
          EOF
      - name: Print prompt to step summary
        run: |
          echo "## Generated Prompt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '``````markdown' >> $GITHUB_STEP_SUMMARY
          cat /tmp/aw-prompts/prompt.txt >> $GITHUB_STEP_SUMMARY
          echo '``````' >> $GITHUB_STEP_SUMMARY
      - name: Run GenAIScript
        run: |
          # Create log directory outside git repo
          mkdir -p /tmp/aw-logs
          
          # Run GenAIScript with MCP config and log capture
          genaiscript run /tmp/aw-prompts/prompt.txt \
            --mcps /tmp/mcp-config/mcp-servers.json \
            --out-output $GITHUB_STEP_SUMMARY 2>&1 | tee /tmp/aw-logs//tmp/genaiscript-issue-duplicate-finder.log.log
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if workflow-complete.txt exists, if so upload it
        id: check_file
        run: |
          if [ -f workflow-complete.txt ]; then
            echo "File exists"
            echo "upload=true" >> $GITHUB_OUTPUT
          else
            echo "File does not exist"
            echo "upload=false" >> $GITHUB_OUTPUT
          fi
      - name: Upload workflow-complete.txt
        if: steps.check_file.outputs.upload == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: workflow-complete
          path: workflow-complete.txt
      - name: Upload agentic engine logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: genaiscript-issue-duplicate-finder.log
          path: /tmp/genaiscript-issue-duplicate-finder.log
          if-no-files-found: warn

