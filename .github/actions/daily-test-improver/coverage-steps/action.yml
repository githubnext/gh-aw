name: 'Daily Test Coverage Steps'
description: 'Runs comprehensive test coverage analysis for gh-aw repository'
runs:
  using: "composite"
  steps:
    # Initialize logging
    - name: Initialize coverage steps log
      shell: bash
      run: |
        echo "=== Daily Test Coverage Improver - Coverage Steps ===" | tee coverage-steps.log
        echo "Started at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log

    # Setup Go environment
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true

    - name: Log Go version
      shell: bash
      run: |
        echo "=== Go Environment ===" | tee -a coverage-steps.log
        go version | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log

    # Setup Node.js environment for JavaScript tests
    - name: Set up Node.js
      uses: actions/setup-node@v5
      with:
        node-version: "24"
        cache: npm
        cache-dependency-path: pkg/workflow/js/package-lock.json

    - name: Log Node.js version
      shell: bash
      run: |
        echo "=== Node.js Environment ===" | tee -a coverage-steps.log
        node --version | tee -a coverage-steps.log
        npm --version | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log

    # Install Go dependencies
    - name: Install Go dependencies
      shell: bash
      run: |
        echo "=== Installing Go Dependencies ===" | tee -a coverage-steps.log
        go mod download 2>&1 | tee -a coverage-steps.log
        go mod verify 2>&1 | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log

    # Install JavaScript dependencies
    - name: Install JavaScript dependencies
      shell: bash
      run: |
        echo "=== Installing JavaScript Dependencies ===" | tee -a coverage-steps.log
        cd pkg/workflow/js
        npm ci 2>&1 | tee -a ../../coverage-steps.log
        echo "" | tee -a ../../coverage-steps.log

    # Run Go tests with coverage
    - name: Run Go tests with coverage
      shell: bash
      run: |
        echo "=== Running Go Tests with Coverage ===" | tee -a coverage-steps.log
        # Run tests with coverage profile
        go test -v -count=1 -timeout=5m -coverprofile=coverage.out -covermode=atomic ./... 2>&1 | tee -a coverage-steps.log
        EXIT_CODE=${PIPESTATUS[0]}
        echo "" | tee -a coverage-steps.log
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "ERROR: Go tests failed with exit code $EXIT_CODE" | tee -a coverage-steps.log
          exit $EXIT_CODE
        fi

    # Generate Go coverage reports
    - name: Generate Go coverage reports
      shell: bash
      run: |
        echo "=== Generating Go Coverage Reports ===" | tee -a coverage-steps.log
        
        # Generate HTML coverage report
        go tool cover -html=coverage.out -o coverage.html
        echo "✓ Generated coverage.html" | tee -a coverage-steps.log
        
        # Generate coverage summary
        echo "" | tee -a coverage-steps.log
        echo "=== Go Coverage Summary ===" | tee -a coverage-steps.log
        go tool cover -func=coverage.out | tee coverage-summary.txt
        cat coverage-summary.txt | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log
        
        # Extract overall coverage percentage
        OVERALL_COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        echo "Overall Go Coverage: $OVERALL_COVERAGE" | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log

    # Run JavaScript tests with coverage
    - name: Run JavaScript tests with coverage
      shell: bash
      run: |
        echo "=== Running JavaScript Tests with Coverage ===" | tee -a coverage-steps.log
        cd pkg/workflow/js
        npm test -- --coverage 2>&1 | tee -a ../../coverage-steps.log
        EXIT_CODE=${PIPESTATUS[0]}
        echo "" | tee -a ../../coverage-steps.log
        
        if [ $EXIT_CODE -ne 0 ]; then
          echo "WARNING: JavaScript tests failed with exit code $EXIT_CODE" | tee -a ../../coverage-steps.log
          echo "Continuing with Go coverage only..." | tee -a ../../coverage-steps.log
        fi

    # Generate package-level coverage breakdown
    - name: Generate detailed coverage breakdown
      shell: bash
      run: |
        echo "=== Package-Level Coverage Breakdown ===" | tee -a coverage-steps.log
        
        # Generate package coverage summary
        go tool cover -func=coverage.out | \
          grep -E "^github.com/githubnext/gh-aw/pkg" | \
          awk '{
            # Extract package path (everything before the last colon)
            idx = match($0, /:[0-9]+:/)
            if (idx > 0) {
              pkg = substr($1, 1, idx-1)
              # Get the coverage percentage (last field)
              cov = $NF
              # Remove % sign and convert to number
              gsub(/%/, "", cov)
              sum[pkg] += cov
              count[pkg]++
            }
          }
          END {
            for (p in sum) {
              avg = sum[p] / count[p]
              printf "%-60s %.1f%%\n", p, avg
            }
          }' | sort -k2 -n | tee package-coverage.txt
        
        cat package-coverage.txt | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log

    # Find lowest coverage areas
    - name: Identify lowest coverage areas
      shell: bash
      run: |
        echo "=== Functions with Lowest Coverage ===" | tee -a coverage-steps.log
        echo "(Top 30 functions with lowest non-zero coverage)" | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log
        
        go tool cover -func=coverage.out | \
          grep -v "total:" | \
          grep -E "pkg/(cli|workflow|parser|console|logger)" | \
          awk '{print $3 "\t" $1 ":" $2}' | \
          grep -v "^0.0%" | \
          sort -n | \
          head -30 | \
          tee low-coverage-areas.txt
        
        cat low-coverage-areas.txt | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log

    # Find zero coverage functions
    - name: Identify zero coverage functions
      shell: bash
      run: |
        echo "=== Functions with Zero Coverage ===" | tee -a coverage-steps.log
        
        ZERO_COUNT=$(go tool cover -func=coverage.out | grep -E "pkg/(cli|workflow|parser)" | grep "^.*0.0%" | wc -l)
        echo "Total functions with 0% coverage: $ZERO_COUNT" | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log
        
        if [ $ZERO_COUNT -gt 0 ]; then
          echo "Sample of zero-coverage functions (first 50):" | tee -a coverage-steps.log
          go tool cover -func=coverage.out | \
            grep -E "pkg/(cli|workflow|parser)" | \
            grep "0.0%" | \
            head -50 | \
            tee zero-coverage-sample.txt
          
          cat zero-coverage-sample.txt | tee -a coverage-steps.log
          echo "" | tee -a coverage-steps.log
        fi

    # Create coverage artifact directory
    - name: Prepare coverage artifacts
      shell: bash
      run: |
        echo "=== Preparing Coverage Artifacts ===" | tee -a coverage-steps.log
        
        mkdir -p coverage-artifacts
        
        # Copy all coverage files
        cp coverage.out coverage-artifacts/ 2>/dev/null || true
        cp coverage.html coverage-artifacts/ 2>/dev/null || true
        cp coverage-summary.txt coverage-artifacts/ 2>/dev/null || true
        cp package-coverage.txt coverage-artifacts/ 2>/dev/null || true
        cp low-coverage-areas.txt coverage-artifacts/ 2>/dev/null || true
        cp zero-coverage-sample.txt coverage-artifacts/ 2>/dev/null || true
        cp coverage-steps.log coverage-artifacts/ 2>/dev/null || true
        
        # Copy JavaScript coverage if it exists
        if [ -d "pkg/workflow/js/coverage" ]; then
          cp -r pkg/workflow/js/coverage coverage-artifacts/js-coverage 2>&1 | tee -a coverage-steps.log || true
        fi
        
        echo "✓ Coverage artifacts prepared in coverage-artifacts/" | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log
        
        # List what we're uploading
        echo "Files to be uploaded:" | tee -a coverage-steps.log
        ls -lh coverage-artifacts/ | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log

    # Upload coverage artifacts
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: coverage-artifacts/
        retention-days: 30

    # Final summary
    - name: Coverage steps completed
      shell: bash
      run: |
        echo "=== Coverage Steps Completed ===" | tee -a coverage-steps.log
        echo "Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log
        echo "Coverage artifacts have been uploaded as 'coverage' artifact" | tee -a coverage-steps.log
        echo "Download the artifact to view:" | tee -a coverage-steps.log
        echo "  - coverage.html: Interactive HTML coverage report" | tee -a coverage-steps.log
        echo "  - coverage.out: Raw coverage data for tools" | tee -a coverage-steps.log
        echo "  - coverage-summary.txt: Function-level coverage summary" | tee -a coverage-steps.log
        echo "  - package-coverage.txt: Package-level breakdown" | tee -a coverage-steps.log
        echo "  - low-coverage-areas.txt: Functions needing attention" | tee -a coverage-steps.log
        echo "  - zero-coverage-sample.txt: Sample of uncovered functions" | tee -a coverage-steps.log
        echo "  - coverage-steps.log: This log file" | tee -a coverage-steps.log
        echo "" | tee -a coverage-steps.log
