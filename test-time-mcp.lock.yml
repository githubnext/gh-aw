# This file was automatically generated by gh-aw. DO NOT EDIT.
# To update this file, edit the corresponding .md file and run:
#   gh aw compile

name: "Time MCP Test Workflow"
on:
  workflow_dispatch: null

permissions: {}

concurrency:
  group: "gh-aw-${{ github.workflow }}"

run-name: "Time MCP Test Workflow"

jobs:
  time-mcp-test-workflow:
    runs-on: ubuntu-latest
    permissions: read-all
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Generate Claude Settings
        run: |
          mkdir -p /tmp/.claude
          cat > /tmp/.claude/settings.json << 'EOF'
          {
            "hooks": {
              "PreToolUse": [
                {
                  "matcher": "WebFetch|WebSearch",
                  "hooks": [
                    {
                      "type": "command",
                      "command": ".claude/hooks/network_permissions.py"
                    }
                  ]
                }
              ]
            }
          }
          EOF
      - name: Generate Network Permissions Hook
        run: |
          mkdir -p .claude/hooks
          cat > .claude/hooks/network_permissions.py << 'EOF'
          #!/usr/bin/env python3
          """
          Network permissions validator for Claude Code engine.
          Generated by gh-aw from engine network permissions configuration.
          """
          
          import json
          import sys
          import urllib.parse
          import re
          
          # Domain allow-list (populated during generation)
          ALLOWED_DOMAINS = ["crl3.digicert.com","crl4.digicert.com","ocsp.digicert.com","ts-crl.ws.symantec.com","ts-ocsp.ws.symantec.com","crl.geotrust.com","ocsp.geotrust.com","crl.thawte.com","ocsp.thawte.com","crl.verisign.com","ocsp.verisign.com","crl.globalsign.com","ocsp.globalsign.com","crls.ssl.com","ocsp.ssl.com","crl.identrust.com","ocsp.identrust.com","crl.sectigo.com","ocsp.sectigo.com","crl.usertrust.com","ocsp.usertrust.com","s.symcb.com","s.symcd.com","json-schema.org","json.schemastore.org","archive.ubuntu.com","security.ubuntu.com","ppa.launchpad.net","keyserver.ubuntu.com","azure.archive.ubuntu.com","api.snapcraft.io","packagecloud.io","packages.cloud.google.com","packages.microsoft.com"]
          
          def extract_domain(url_or_query):
              """Extract domain from URL or search query."""
              if not url_or_query:
                  return None
              
              if url_or_query.startswith(('http://', 'https://')):
                  return urllib.parse.urlparse(url_or_query).netloc.lower()
              
              # Check for domain patterns in search queries
              match = re.search(r'site:([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})', url_or_query)
              if match:
                  return match.group(1).lower()
              
              return None
          
          def is_domain_allowed(domain):
              """Check if domain is allowed."""
              if not domain:
                  # If no domain detected, allow only if not under deny-all policy
                  return bool(ALLOWED_DOMAINS)  # False if empty list (deny-all), True if has domains
              
              # Empty allowed domains means deny all
              if not ALLOWED_DOMAINS:
                  return False
              
              for pattern in ALLOWED_DOMAINS:
                  regex = pattern.replace('.', r'\.').replace('*', '.*')
                  if re.match(f'^{regex}$', domain):
                      return True
              return False
          
          # Main logic
          try:
              data = json.load(sys.stdin)
              tool_name = data.get('tool_name', '')
              tool_input = data.get('tool_input', {})
              
              if tool_name not in ['WebFetch', 'WebSearch']:
                  sys.exit(0)  # Allow other tools
              
              target = tool_input.get('url') or tool_input.get('query', '')
              domain = extract_domain(target)
              
              # For WebSearch, apply domain restrictions consistently
              # If no domain detected in search query, check if restrictions are in place
              if tool_name == 'WebSearch' and not domain:
                  # Since this hook is only generated when network permissions are configured,
                  # empty ALLOWED_DOMAINS means deny-all policy
                  if not ALLOWED_DOMAINS:  # Empty list means deny all
                      print(f"Network access blocked: deny-all policy in effect", file=sys.stderr)
                      print(f"No domains are allowed for WebSearch", file=sys.stderr)
                      sys.exit(2)  # Block under deny-all policy
                  else:
                      print(f"Network access blocked for web-search: no specific domain detected", file=sys.stderr)
                      print(f"Allowed domains: {', '.join(ALLOWED_DOMAINS)}", file=sys.stderr)
                      sys.exit(2)  # Block general searches when domain allowlist is configured
              
              if not is_domain_allowed(domain):
                  print(f"Network access blocked for domain: {domain}", file=sys.stderr)
                  print(f"Allowed domains: {', '.join(ALLOWED_DOMAINS)}", file=sys.stderr)
                  sys.exit(2)  # Block with feedback to Claude
              
              sys.exit(0)  # Allow
              
          except Exception as e:
              print(f"Network validation error: {e}", file=sys.stderr)
              sys.exit(2)  # Block on errors
          
          EOF
          chmod +x .claude/hooks/network_permissions.py
      - name: Setup MCPs
        uses: actions/github-script@v8
        env:
          GITHUB_AW_TOOLS_CONFIG: |
            {"github":{"allowed":["list_issues","create_issue","download_workflow_run_artifact","get_job_logs","get_workflow_run","get_workflow_run_logs","get_workflow_run_usage","list_workflow_jobs","list_workflow_run_artifacts","list_workflow_runs","list_workflows","get_code_scanning_alert","list_code_scanning_alerts","get_me","get_dependabot_alert","list_dependabot_alerts","get_discussion","get_discussion_comments","list_discussion_categories","list_discussions","get_issue","get_issue_comments","search_issues","get_notification_details","list_notifications","search_orgs","get_pull_request","get_pull_request_comments","get_pull_request_diff","get_pull_request_files","get_pull_request_reviews","get_pull_request_status","list_pull_requests","search_pull_requests","get_commit","get_file_contents","get_tag","list_branches","list_commits","list_tags","search_code","search_repositories","get_secret_scanning_alert","list_secret_scanning_alerts","search_users"]},"time":{"allowed":["current_time","get_timezone","set_timezone"],"mcp-ref":"vscode"}}
        with:
          script: |
            /**
             * Setup MCP servers configuration for agentic workflows
             * This script generates the mcp-servers.json file based on workflow tool configuration
             */
            
            function main() {
              const fs = require("fs");
              const path = require("path");
            
              try {
                // Get the tools configuration from environment variable
                const toolsConfigStr = process.env.GITHUB_AW_TOOLS_CONFIG;
                if (!toolsConfigStr) {
                  core.setFailed("GITHUB_AW_TOOLS_CONFIG environment variable not set");
                  return;
                }
            
                let toolsConfig;
                try {
                  toolsConfig = JSON.parse(toolsConfigStr);
                } catch (error) {
                  core.setFailed(`Failed to parse GITHUB_AW_TOOLS_CONFIG: ${error.message}`);
                  return;
                }
            
                const mcpServersConfig = generateMCPConfig(toolsConfig);
            
                // Ensure the output directory exists
                const outputDir = "/tmp/mcp-config";
                fs.mkdirSync(outputDir, { recursive: true });
            
                // Write the MCP servers configuration
                const outputPath = path.join(outputDir, "mcp-servers.json");
                fs.writeFileSync(outputPath, JSON.stringify(mcpServersConfig, null, 2));
            
                core.info(`Generated MCP configuration at: ${outputPath}`);
                core.info(`Configuration: ${JSON.stringify(mcpServersConfig, null, 2)}`);
            
                // Set output for subsequent steps
                core.setOutput("mcp_config_path", outputPath);
              } catch (error) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                core.setFailed(`Failed to setup MCP configuration: ${errorMessage}`);
              }
            }
            
            /**
             * Generate MCP server configuration from tools configuration
             * @param {Object} toolsConfig - The tools configuration object
             * @returns {Object} The MCP servers configuration
             */
            function generateMCPConfig(toolsConfig) {
              const mcpServers = {};
            
              for (const [toolName, toolConfig] of Object.entries(toolsConfig)) {
                if (!toolConfig || typeof toolConfig !== "object") {
                  continue;
                }
            
                // Handle built-in tools
                if (toolName === "github") {
                  mcpServers.github = generateGitHubMCPConfig(toolConfig);
                } else if (toolName === "playwright") {
                  mcpServers.playwright = generatePlaywrightMCPConfig(toolConfig);
                } else if (toolName === "cache-memory") {
                  mcpServers["cache-memory"] = generateCacheMemoryMCPConfig(toolConfig);
                } else {
                  // Handle custom MCP tools
                  const customConfig = generateCustomMCPConfig(toolName, toolConfig);
                  if (customConfig) {
                    mcpServers[toolName] = customConfig;
                  }
                }
              }
            
              return { mcpServers };
            }
            
            /**
             * Generate GitHub MCP server configuration
             * @param {Object} githubConfig - GitHub tool configuration
             * @returns {Object} GitHub MCP server configuration
             */
            function generateGitHubMCPConfig(githubConfig) {
              const dockerImageVersion = githubConfig.docker_image_version || "sha-09deac4";
            
              return {
                command: "docker",
                args: [
                  "run",
                  "-i",
                  "--rm",
                  "-e",
                  "GITHUB_PERSONAL_ACCESS_TOKEN",
                  `ghcr.io/github/github-mcp-server:${dockerImageVersion}`
                ],
                env: {
                  GITHUB_PERSONAL_ACCESS_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
                }
              };
            }
            
            /**
             * Generate Playwright MCP server configuration
             * @param {Object} playwrightConfig - Playwright tool configuration
             * @returns {Object} Playwright MCP server configuration
             */
            function generatePlaywrightMCPConfig(playwrightConfig) {
              const args = ["@playwright/mcp@latest"];
            
              // Handle allowed domains
              if (playwrightConfig.allowed_domains) {
                let allowedDomains = [];
                if (Array.isArray(playwrightConfig.allowed_domains)) {
                  allowedDomains = playwrightConfig.allowed_domains;
                } else if (typeof playwrightConfig.allowed_domains === "string") {
                  allowedDomains = [playwrightConfig.allowed_domains];
                }
            
                // Ensure localhost domains are always included
                if (!allowedDomains.includes("localhost")) {
                  allowedDomains.unshift("localhost");
                }
                if (!allowedDomains.includes("127.0.0.1")) {
                  allowedDomains.unshift("127.0.0.1");
                }
            
                if (allowedDomains.length > 0) {
                  args.push("--allowed-origins", allowedDomains.join(","));
                }
              }
            
              return {
                command: "npx",
                args: args
              };
            }
            
            /**
             * Generate cache-memory MCP server configuration
             * @param {Object} cacheConfig - Cache memory tool configuration
             * @returns {Object} Cache memory MCP server configuration
             */
            function generateCacheMemoryMCPConfig(cacheConfig) {
              const dockerImage = cacheConfig["docker-image"] || "mcp/memory";
            
              return {
                command: "docker",
                args: [
                  "run",
                  "-i",
                  "--rm",
                  dockerImage
                ]
              };
            }
            
            /**
             * Generate custom MCP server configuration
             * @param {string} toolName - The tool name
             * @param {Object} toolConfig - The tool configuration
             * @returns {Object|null} Custom MCP server configuration or null if not applicable
             */
            function generateCustomMCPConfig(toolName, toolConfig) {
              // Check for mcp-ref (VSCode import)
              if (toolConfig["mcp-ref"] === "vscode") {
                return loadVSCodeMCPConfig(toolName);
              }
            
              // Check for direct MCP configuration
              if (toolConfig.mcp) {
                return parseDirectMCPConfig(toolConfig.mcp);
              }
            
              return null;
            }
            
            /**
             * Load MCP configuration from VSCode settings
             * @param {string} serverName - The server name to load from VSCode
             * @returns {Object} MCP server configuration
             */
            function loadVSCodeMCPConfig(serverName) {
              const fs = require("fs");
              const path = require("path");
            
              try {
                // Try to read .vscode/mcp.json from the workspace root
                const vscodeMCPPath = path.join(process.cwd(), ".vscode", "mcp.json");
                
                if (!fs.existsSync(vscodeMCPPath)) {
                  throw new Error(`.vscode/mcp.json file not found at ${vscodeMCPPath}`);
                }
            
                const data = fs.readFileSync(vscodeMCPPath, "utf8");
                const config = JSON.parse(data);
            
                if (!config.servers || !config.servers[serverName]) {
                  const availableServers = config.servers ? Object.keys(config.servers) : [];
                  throw new Error(`Server '${serverName}' not found in .vscode/mcp.json. Available servers: [${availableServers.join(", ")}]`);
                }
            
                const server = config.servers[serverName];
                const result = {
                  command: server.command
                };
            
                if (server.args && server.args.length > 0) {
                  result.args = server.args;
                }
            
                if (server.env && Object.keys(server.env).length > 0) {
                  result.env = server.env;
                }
            
                return result;
              } catch (error) {
                throw new Error(`Failed to load VSCode MCP config for '${serverName}': ${error.message}`);
              }
            }
            
            /**
             * Parse direct MCP configuration
             * @param {Object|string} mcpConfig - The MCP configuration (object or JSON string)
             * @returns {Object} Parsed MCP server configuration
             */
            function parseDirectMCPConfig(mcpConfig) {
              let config = mcpConfig;
              
              // Handle JSON string format
              if (typeof mcpConfig === "string") {
                try {
                  config = JSON.parse(mcpConfig);
                } catch (error) {
                  throw new Error(`Invalid JSON in MCP configuration: ${error.message}`);
                }
              }
            
              if (!config.type) {
                throw new Error("MCP configuration missing required 'type' field");
              }
            
              const result = {};
            
              if (config.type === "stdio") {
                // Handle container field (simplified Docker run)
                if (config.container) {
                  result.command = "docker";
                  result.args = ["run", "--rm", "-i"];
                  
                  // Add environment variables
                  if (config.env) {
                    for (const [key, value] of Object.entries(config.env)) {
                      result.args.push("-e", key);
                    }
                    result.env = config.env;
                  }
                  
                  result.args.push(config.container);
                } else if (config.command) {
                  result.command = config.command;
                  if (config.args) {
                    result.args = config.args;
                  }
                  if (config.env) {
                    result.env = config.env;
                  }
                } else {
                  throw new Error("stdio type requires 'command' or 'container' field");
                }
              } else if (config.type === "http") {
                if (!config.url) {
                  throw new Error("http type requires 'url' field");
                }
                // HTTP type MCP servers are not supported in local execution
                throw new Error("HTTP type MCP servers are not supported in local execution");
              } else {
                throw new Error(`Unsupported MCP type: ${config.type}`);
              }
            
              return result;
            }
            
            main();
      - name: Create prompt
        env:
          GITHUB_AW_PROMPT: /tmp/aw-prompts/prompt.txt
        run: |
          mkdir -p /tmp/aw-prompts
          cat > $GITHUB_AW_PROMPT << 'EOF'
          # Time MCP Test Workflow
          
          This workflow tests the mcp/time MCP server using VSCode configuration import.
          
          Please:
          1. Get the current time
          2. Check the current timezone 
          3. Create a summary of the current date and time information
          4. Create a simple issue documenting the time information
          
          EOF
      - name: Print prompt to step summary
        run: |
          echo "## Generated Prompt" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '``````markdown' >> $GITHUB_STEP_SUMMARY
          cat $GITHUB_AW_PROMPT >> $GITHUB_STEP_SUMMARY
          echo '``````' >> $GITHUB_STEP_SUMMARY
        env:
          GITHUB_AW_PROMPT: /tmp/aw-prompts/prompt.txt
      - name: Generate agentic run info
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            
            const awInfo = {
              engine_id: "claude",
              engine_name: "Claude Code",
              model: "",
              version: "",
              workflow_name: "Time MCP Test Workflow",
              experimental: false,
              supports_tools_whitelist: true,
              supports_http_transport: true,
              run_id: context.runId,
              run_number: context.runNumber,
              run_attempt: process.env.GITHUB_RUN_ATTEMPT,
              repository: context.repo.owner + '/' + context.repo.repo,
              ref: context.ref,
              sha: context.sha,
              actor: context.actor,
              event_name: context.eventName,
              staged: false,
              created_at: new Date().toISOString()
            };
            
            // Write to /tmp directory to avoid inclusion in PR
            const tmpPath = '/tmp/aw_info.json';
            fs.writeFileSync(tmpPath, JSON.stringify(awInfo, null, 2));
            console.log('Generated aw_info.json at:', tmpPath);
            console.log(JSON.stringify(awInfo, null, 2));
            
            // Add agentic workflow run information to step summary
            core.summary
              .addRaw('## Agentic Run Information\n\n')
              .addRaw('```json\n')
              .addRaw(JSON.stringify(awInfo, null, 2))
              .addRaw('\n```\n')
              .write();
      - name: Upload agentic run info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aw_info.json
          path: /tmp/aw_info.json
          if-no-files-found: warn
      - name: Execute Claude Code CLI
        id: agentic_execution
        # Allowed tools (sorted):
        # - ExitPlanMode
        # - Glob
        # - Grep
        # - LS
        # - NotebookRead
        # - Read
        # - Task
        # - TodoWrite
        # - mcp__github__create_issue
        # - mcp__github__download_workflow_run_artifact
        # - mcp__github__get_code_scanning_alert
        # - mcp__github__get_commit
        # - mcp__github__get_dependabot_alert
        # - mcp__github__get_discussion
        # - mcp__github__get_discussion_comments
        # - mcp__github__get_file_contents
        # - mcp__github__get_issue
        # - mcp__github__get_issue_comments
        # - mcp__github__get_job_logs
        # - mcp__github__get_me
        # - mcp__github__get_notification_details
        # - mcp__github__get_pull_request
        # - mcp__github__get_pull_request_comments
        # - mcp__github__get_pull_request_diff
        # - mcp__github__get_pull_request_files
        # - mcp__github__get_pull_request_reviews
        # - mcp__github__get_pull_request_status
        # - mcp__github__get_secret_scanning_alert
        # - mcp__github__get_tag
        # - mcp__github__get_workflow_run
        # - mcp__github__get_workflow_run_logs
        # - mcp__github__get_workflow_run_usage
        # - mcp__github__list_branches
        # - mcp__github__list_code_scanning_alerts
        # - mcp__github__list_commits
        # - mcp__github__list_dependabot_alerts
        # - mcp__github__list_discussion_categories
        # - mcp__github__list_discussions
        # - mcp__github__list_issues
        # - mcp__github__list_notifications
        # - mcp__github__list_pull_requests
        # - mcp__github__list_secret_scanning_alerts
        # - mcp__github__list_tags
        # - mcp__github__list_workflow_jobs
        # - mcp__github__list_workflow_run_artifacts
        # - mcp__github__list_workflow_runs
        # - mcp__github__list_workflows
        # - mcp__github__search_code
        # - mcp__github__search_issues
        # - mcp__github__search_orgs
        # - mcp__github__search_pull_requests
        # - mcp__github__search_repositories
        # - mcp__github__search_users
        # - mcp__time__current_time
        # - mcp__time__get_timezone
        # - mcp__time__set_timezone
        timeout-minutes: 5
        run: |
          set -o pipefail
          # Execute Claude Code CLI with prompt from file
          npx @anthropic-ai/claude-code@latest --print --mcp-config /tmp/mcp-config/mcp-servers.json --allowed-tools "ExitPlanMode,Glob,Grep,LS,NotebookRead,Read,Task,TodoWrite,mcp__github__create_issue,mcp__github__download_workflow_run_artifact,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_dependabot_alert,mcp__github__get_discussion,mcp__github__get_discussion_comments,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_job_logs,mcp__github__get_me,mcp__github__get_notification_details,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_tag,mcp__github__get_workflow_run,mcp__github__get_workflow_run_logs,mcp__github__get_workflow_run_usage,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_dependabot_alerts,mcp__github__list_discussion_categories,mcp__github__list_discussions,mcp__github__list_issues,mcp__github__list_notifications,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_tags,mcp__github__list_workflow_jobs,mcp__github__list_workflow_run_artifacts,mcp__github__list_workflow_runs,mcp__github__list_workflows,mcp__github__search_code,mcp__github__search_issues,mcp__github__search_orgs,mcp__github__search_pull_requests,mcp__github__search_repositories,mcp__github__search_users,mcp__time__current_time,mcp__time__get_timezone,mcp__time__set_timezone" --debug --verbose --permission-mode bypassPermissions --output-format json --settings /tmp/.claude/settings.json "$(cat /tmp/aw-prompts/prompt.txt)" 2>&1 | tee /tmp/time-mcp-test-workflow.log
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          DISABLE_TELEMETRY: "1"
          DISABLE_ERROR_REPORTING: "1"
          DISABLE_BUG_COMMAND: "1"
          GITHUB_AW_PROMPT: /tmp/aw-prompts/prompt.txt
      - name: Ensure log file exists
        if: always()
        run: |
          # Ensure log file exists
          touch /tmp/time-mcp-test-workflow.log
          # Show last few lines for debugging
          echo "=== Last 10 lines of Claude execution log ==="
          tail -10 /tmp/time-mcp-test-workflow.log || echo "No log content available"
      - name: Parse agent logs for step summary
        if: always()
        uses: actions/github-script@v8
        env:
          GITHUB_AW_AGENT_OUTPUT: /tmp/time-mcp-test-workflow.log
        with:
          script: |
            function main() {
              const fs = require("fs");
              try {
                const logFile = process.env.GITHUB_AW_AGENT_OUTPUT;
                if (!logFile) {
                  core.info("No agent log file specified");
                  return;
                }
                if (!fs.existsSync(logFile)) {
                  core.info(`Log file not found: ${logFile}`);
                  return;
                }
                const logContent = fs.readFileSync(logFile, "utf8");
                const result = parseClaudeLog(logContent);
                core.summary.addRaw(result.markdown).write();
                if (result.mcpFailures && result.mcpFailures.length > 0) {
                  const failedServers = result.mcpFailures.join(", ");
                  core.setFailed(`MCP server(s) failed to launch: ${failedServers}`);
                }
              } catch (error) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                core.setFailed(errorMessage);
              }
            }
            /**
             * Parses Claude log content and converts it to markdown format
             * @param {string} logContent - The raw log content as a string
             * @returns {{markdown: string, mcpFailures: string[]}} Result with formatted markdown content and MCP failure list
             */
            function parseClaudeLog(logContent) {
              try {
                let logEntries;
                // First, try to parse as JSON array (old format)
                try {
                  logEntries = JSON.parse(logContent);
                  if (!Array.isArray(logEntries)) {
                    throw new Error("Not a JSON array");
                  }
                } catch (jsonArrayError) {
                  // If that fails, try to parse as mixed format (debug logs + JSONL)
                  logEntries = [];
                  const lines = logContent.split("\n");
                  for (const line of lines) {
                    const trimmedLine = line.trim();
                    if (trimmedLine === "") {
                      continue; // Skip empty lines
                    }
                    // Handle lines that start with [ (JSON array format)
                    if (trimmedLine.startsWith("[{")) {
                      try {
                        const arrayEntries = JSON.parse(trimmedLine);
                        if (Array.isArray(arrayEntries)) {
                          logEntries.push(...arrayEntries);
                          continue;
                        }
                      } catch (arrayParseError) {
                        // Skip invalid array lines
                        continue;
                      }
                    }
                    // Skip debug log lines that don't start with {
                    // (these are typically timestamped debug messages)
                    if (!trimmedLine.startsWith("{")) {
                      continue;
                    }
                    // Try to parse each line as JSON
                    try {
                      const jsonEntry = JSON.parse(trimmedLine);
                      logEntries.push(jsonEntry);
                    } catch (jsonLineError) {
                      // Skip invalid JSON lines (could be partial debug output)
                      continue;
                    }
                  }
                }
                if (!Array.isArray(logEntries) || logEntries.length === 0) {
                  return {
                    markdown:
                      "## Agent Log Summary\n\nLog format not recognized as Claude JSON array or JSONL.\n",
                    mcpFailures: [],
                  };
                }
                let markdown = "";
                const mcpFailures = [];
                // Check for initialization data first
                const initEntry = logEntries.find(
                  entry => entry.type === "system" && entry.subtype === "init"
                );
                if (initEntry) {
                  markdown += "## 🚀 Initialization\n\n";
                  const initResult = formatInitializationSummary(initEntry);
                  markdown += initResult.markdown;
                  mcpFailures.push(...initResult.mcpFailures);
                  markdown += "\n";
                }
                markdown += "## 🤖 Commands and Tools\n\n";
                const toolUsePairs = new Map(); // Map tool_use_id to tool_result
                const commandSummary = []; // For the succinct summary
                // First pass: collect tool results by tool_use_id
                for (const entry of logEntries) {
                  if (entry.type === "user" && entry.message?.content) {
                    for (const content of entry.message.content) {
                      if (content.type === "tool_result" && content.tool_use_id) {
                        toolUsePairs.set(content.tool_use_id, content);
                      }
                    }
                  }
                }
                // Collect all tool uses for summary
                for (const entry of logEntries) {
                  if (entry.type === "assistant" && entry.message?.content) {
                    for (const content of entry.message.content) {
                      if (content.type === "tool_use") {
                        const toolName = content.name;
                        const input = content.input || {};
                        // Skip internal tools - only show external commands and API calls
                        if (
                          [
                            "Read",
                            "Write",
                            "Edit",
                            "MultiEdit",
                            "LS",
                            "Grep",
                            "Glob",
                            "TodoWrite",
                          ].includes(toolName)
                        ) {
                          continue; // Skip internal file operations and searches
                        }
                        // Find the corresponding tool result to get status
                        const toolResult = toolUsePairs.get(content.id);
                        let statusIcon = "❓";
                        if (toolResult) {
                          statusIcon = toolResult.is_error === true ? "❌" : "✅";
                        }
                        // Add to command summary (only external tools)
                        if (toolName === "Bash") {
                          const formattedCommand = formatBashCommand(input.command || "");
                          commandSummary.push(`* ${statusIcon} \`${formattedCommand}\``);
                        } else if (toolName.startsWith("mcp__")) {
                          const mcpName = formatMcpName(toolName);
                          commandSummary.push(`* ${statusIcon} \`${mcpName}(...)\``);
                        } else {
                          // Handle other external tools (if any)
                          commandSummary.push(`* ${statusIcon} ${toolName}`);
                        }
                      }
                    }
                  }
                }
                // Add command summary
                if (commandSummary.length > 0) {
                  for (const cmd of commandSummary) {
                    markdown += `${cmd}\n`;
                  }
                } else {
                  markdown += "No commands or tools used.\n";
                }
                // Add Information section from the last entry with result metadata
                markdown += "\n## 📊 Information\n\n";
                // Find the last entry with metadata
                const lastEntry = logEntries[logEntries.length - 1];
                if (
                  lastEntry &&
                  (lastEntry.num_turns ||
                    lastEntry.duration_ms ||
                    lastEntry.total_cost_usd ||
                    lastEntry.usage)
                ) {
                  if (lastEntry.num_turns) {
                    markdown += `**Turns:** ${lastEntry.num_turns}\n\n`;
                  }
                  if (lastEntry.duration_ms) {
                    const durationSec = Math.round(lastEntry.duration_ms / 1000);
                    const minutes = Math.floor(durationSec / 60);
                    const seconds = durationSec % 60;
                    markdown += `**Duration:** ${minutes}m ${seconds}s\n\n`;
                  }
                  if (lastEntry.total_cost_usd) {
                    markdown += `**Total Cost:** $${lastEntry.total_cost_usd.toFixed(4)}\n\n`;
                  }
                  if (lastEntry.usage) {
                    const usage = lastEntry.usage;
                    if (usage.input_tokens || usage.output_tokens) {
                      markdown += `**Token Usage:**\n`;
                      if (usage.input_tokens)
                        markdown += `- Input: ${usage.input_tokens.toLocaleString()}\n`;
                      if (usage.cache_creation_input_tokens)
                        markdown += `- Cache Creation: ${usage.cache_creation_input_tokens.toLocaleString()}\n`;
                      if (usage.cache_read_input_tokens)
                        markdown += `- Cache Read: ${usage.cache_read_input_tokens.toLocaleString()}\n`;
                      if (usage.output_tokens)
                        markdown += `- Output: ${usage.output_tokens.toLocaleString()}\n`;
                      markdown += "\n";
                    }
                  }
                  if (
                    lastEntry.permission_denials &&
                    lastEntry.permission_denials.length > 0
                  ) {
                    markdown += `**Permission Denials:** ${lastEntry.permission_denials.length}\n\n`;
                  }
                }
                markdown += "\n## 🤖 Reasoning\n\n";
                // Second pass: process assistant messages in sequence
                for (const entry of logEntries) {
                  if (entry.type === "assistant" && entry.message?.content) {
                    for (const content of entry.message.content) {
                      if (content.type === "text" && content.text) {
                        // Add reasoning text directly (no header)
                        const text = content.text.trim();
                        if (text && text.length > 0) {
                          markdown += text + "\n\n";
                        }
                      } else if (content.type === "tool_use") {
                        // Process tool use with its result
                        const toolResult = toolUsePairs.get(content.id);
                        const toolMarkdown = formatToolUse(content, toolResult);
                        if (toolMarkdown) {
                          markdown += toolMarkdown;
                        }
                      }
                    }
                  }
                }
                return { markdown, mcpFailures };
              } catch (error) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                return {
                  markdown: `## Agent Log Summary\n\nError parsing Claude log (tried both JSON array and JSONL formats): ${errorMessage}\n`,
                  mcpFailures: [],
                };
              }
            }
            /**
             * Formats initialization information from system init entry
             * @param {any} initEntry - The system init entry containing tools, mcp_servers, etc.
             * @returns {{markdown: string, mcpFailures: string[]}} Result with formatted markdown string and MCP failure list
             */
            function formatInitializationSummary(initEntry) {
              let markdown = "";
              const mcpFailures = [];
              // Display model and session info
              if (initEntry.model) {
                markdown += `**Model:** ${initEntry.model}\n\n`;
              }
              if (initEntry.session_id) {
                markdown += `**Session ID:** ${initEntry.session_id}\n\n`;
              }
              if (initEntry.cwd) {
                // Show a cleaner path by removing common prefixes
                const cleanCwd = initEntry.cwd.replace(
                  /^\/home\/runner\/work\/[^\/]+\/[^\/]+/,
                  "."
                );
                markdown += `**Working Directory:** ${cleanCwd}\n\n`;
              }
              // Display MCP servers status
              if (initEntry.mcp_servers && Array.isArray(initEntry.mcp_servers)) {
                markdown += "**MCP Servers:**\n";
                for (const server of initEntry.mcp_servers) {
                  const statusIcon =
                    server.status === "connected"
                      ? "✅"
                      : server.status === "failed"
                        ? "❌"
                        : "❓";
                  markdown += `- ${statusIcon} ${server.name} (${server.status})\n`;
                  // Track failed MCP servers
                  if (server.status === "failed") {
                    mcpFailures.push(server.name);
                  }
                }
                markdown += "\n";
              }
              // Display tools by category
              if (initEntry.tools && Array.isArray(initEntry.tools)) {
                markdown += "**Available Tools:**\n";
                // Categorize tools
                /** @type {{ [key: string]: string[] }} */
                const categories = {
                  Core: [],
                  "File Operations": [],
                  "Git/GitHub": [],
                  MCP: [],
                  Other: [],
                };
                for (const tool of initEntry.tools) {
                  if (
                    ["Task", "Bash", "BashOutput", "KillBash", "ExitPlanMode"].includes(
                      tool
                    )
                  ) {
                    categories["Core"].push(tool);
                  } else if (
                    [
                      "Read",
                      "Edit",
                      "MultiEdit",
                      "Write",
                      "LS",
                      "Grep",
                      "Glob",
                      "NotebookEdit",
                    ].includes(tool)
                  ) {
                    categories["File Operations"].push(tool);
                  } else if (tool.startsWith("mcp__github__")) {
                    categories["Git/GitHub"].push(formatMcpName(tool));
                  } else if (
                    tool.startsWith("mcp__") ||
                    ["ListMcpResourcesTool", "ReadMcpResourceTool"].includes(tool)
                  ) {
                    categories["MCP"].push(
                      tool.startsWith("mcp__") ? formatMcpName(tool) : tool
                    );
                  } else {
                    categories["Other"].push(tool);
                  }
                }
                // Display categories with tools
                for (const [category, tools] of Object.entries(categories)) {
                  if (tools.length > 0) {
                    markdown += `- **${category}:** ${tools.length} tools\n`;
                    if (tools.length <= 5) {
                      // Show all tools if 5 or fewer
                      markdown += `  - ${tools.join(", ")}\n`;
                    } else {
                      // Show first few and count
                      markdown += `  - ${tools.slice(0, 3).join(", ")}, and ${tools.length - 3} more\n`;
                    }
                  }
                }
                markdown += "\n";
              }
              // Display slash commands if available
              if (initEntry.slash_commands && Array.isArray(initEntry.slash_commands)) {
                const commandCount = initEntry.slash_commands.length;
                markdown += `**Slash Commands:** ${commandCount} available\n`;
                if (commandCount <= 10) {
                  markdown += `- ${initEntry.slash_commands.join(", ")}\n`;
                } else {
                  markdown += `- ${initEntry.slash_commands.slice(0, 5).join(", ")}, and ${commandCount - 5} more\n`;
                }
                markdown += "\n";
              }
              return { markdown, mcpFailures };
            }
            /**
             * Formats a tool use entry with its result into markdown
             * @param {any} toolUse - The tool use object containing name, input, etc.
             * @param {any} toolResult - The corresponding tool result object
             * @returns {string} Formatted markdown string
             */
            function formatToolUse(toolUse, toolResult) {
              const toolName = toolUse.name;
              const input = toolUse.input || {};
              // Skip TodoWrite except the very last one (we'll handle this separately)
              if (toolName === "TodoWrite") {
                return ""; // Skip for now, would need global context to find the last one
              }
              // Helper function to determine status icon
              function getStatusIcon() {
                if (toolResult) {
                  return toolResult.is_error === true ? "❌" : "✅";
                }
                return "❓"; // Unknown by default
              }
              let markdown = "";
              const statusIcon = getStatusIcon();
              switch (toolName) {
                case "Bash":
                  const command = input.command || "";
                  const description = input.description || "";
                  // Format the command to be single line
                  const formattedCommand = formatBashCommand(command);
                  if (description) {
                    markdown += `${description}:\n\n`;
                  }
                  markdown += `${statusIcon} \`${formattedCommand}\`\n\n`;
                  break;
                case "Read":
                  const filePath = input.file_path || input.path || "";
                  const relativePath = filePath.replace(
                    /^\/[^\/]*\/[^\/]*\/[^\/]*\/[^\/]*\//,
                    ""
                  ); // Remove /home/runner/work/repo/repo/ prefix
                  markdown += `${statusIcon} Read \`${relativePath}\`\n\n`;
                  break;
                case "Write":
                case "Edit":
                case "MultiEdit":
                  const writeFilePath = input.file_path || input.path || "";
                  const writeRelativePath = writeFilePath.replace(
                    /^\/[^\/]*\/[^\/]*\/[^\/]*\/[^\/]*\//,
                    ""
                  );
                  markdown += `${statusIcon} Write \`${writeRelativePath}\`\n\n`;
                  break;
                case "Grep":
                case "Glob":
                  const query = input.query || input.pattern || "";
                  markdown += `${statusIcon} Search for \`${truncateString(query, 80)}\`\n\n`;
                  break;
                case "LS":
                  const lsPath = input.path || "";
                  const lsRelativePath = lsPath.replace(
                    /^\/[^\/]*\/[^\/]*\/[^\/]*\/[^\/]*\//,
                    ""
                  );
                  markdown += `${statusIcon} LS: ${lsRelativePath || lsPath}\n\n`;
                  break;
                default:
                  // Handle MCP calls and other tools
                  if (toolName.startsWith("mcp__")) {
                    const mcpName = formatMcpName(toolName);
                    const params = formatMcpParameters(input);
                    markdown += `${statusIcon} ${mcpName}(${params})\n\n`;
                  } else {
                    // Generic tool formatting - show the tool name and main parameters
                    const keys = Object.keys(input);
                    if (keys.length > 0) {
                      // Try to find the most important parameter
                      const mainParam =
                        keys.find(k =>
                          ["query", "command", "path", "file_path", "content"].includes(k)
                        ) || keys[0];
                      const value = String(input[mainParam] || "");
                      if (value) {
                        markdown += `${statusIcon} ${toolName}: ${truncateString(value, 100)}\n\n`;
                      } else {
                        markdown += `${statusIcon} ${toolName}\n\n`;
                      }
                    } else {
                      markdown += `${statusIcon} ${toolName}\n\n`;
                    }
                  }
              }
              return markdown;
            }
            /**
             * Formats MCP tool name from internal format to display format
             * @param {string} toolName - The raw tool name (e.g., mcp__github__search_issues)
             * @returns {string} Formatted tool name (e.g., github::search_issues)
             */
            function formatMcpName(toolName) {
              // Convert mcp__github__search_issues to github::search_issues
              if (toolName.startsWith("mcp__")) {
                const parts = toolName.split("__");
                if (parts.length >= 3) {
                  const provider = parts[1]; // github, etc.
                  const method = parts.slice(2).join("_"); // search_issues, etc.
                  return `${provider}::${method}`;
                }
              }
              return toolName;
            }
            /**
             * Formats MCP parameters into a human-readable string
             * @param {Record<string, any>} input - The input object containing parameters
             * @returns {string} Formatted parameters string
             */
            function formatMcpParameters(input) {
              const keys = Object.keys(input);
              if (keys.length === 0) return "";
              const paramStrs = [];
              for (const key of keys.slice(0, 4)) {
                // Show up to 4 parameters
                const value = String(input[key] || "");
                paramStrs.push(`${key}: ${truncateString(value, 40)}`);
              }
              if (keys.length > 4) {
                paramStrs.push("...");
              }
              return paramStrs.join(", ");
            }
            /**
             * Formats a bash command by normalizing whitespace and escaping
             * @param {string} command - The raw bash command string
             * @returns {string} Formatted and escaped command string
             */
            function formatBashCommand(command) {
              if (!command) return "";
              // Convert multi-line commands to single line by replacing newlines with spaces
              // and collapsing multiple spaces
              let formatted = command
                .replace(/\n/g, " ") // Replace newlines with spaces
                .replace(/\r/g, " ") // Replace carriage returns with spaces
                .replace(/\t/g, " ") // Replace tabs with spaces
                .replace(/\s+/g, " ") // Collapse multiple spaces into one
                .trim(); // Remove leading/trailing whitespace
              // Escape backticks to prevent markdown issues
              formatted = formatted.replace(/`/g, "\\`");
              // Truncate if too long (keep reasonable length for summary)
              const maxLength = 80;
              if (formatted.length > maxLength) {
                formatted = formatted.substring(0, maxLength) + "...";
              }
              return formatted;
            }
            /**
             * Truncates a string to a maximum length with ellipsis
             * @param {string} str - The string to truncate
             * @param {number} maxLength - Maximum allowed length
             * @returns {string} Truncated string with ellipsis if needed
             */
            function truncateString(str, maxLength) {
              if (!str) return "";
              if (str.length <= maxLength) return str;
              return str.substring(0, maxLength) + "...";
            }
            // Export for testing
            if (typeof module !== "undefined" && module.exports) {
              module.exports = {
                parseClaudeLog,
                formatToolUse,
                formatInitializationSummary,
                formatBashCommand,
                truncateString,
              };
            }
            main();
      - name: Upload agent logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: time-mcp-test-workflow.log
          path: /tmp/time-mcp-test-workflow.log
          if-no-files-found: warn

