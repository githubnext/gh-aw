//go:build integration

package workflow

import (
	"os"
	"path/filepath"
	"strings"
	"testing"
)

func TestGitHubModelsEngineWorkflowCompilation(t *testing.T) {
	// Create temporary directory for test files
	tmpDir, err := os.MkdirTemp("", "github-models-engine-test")
	if err != nil {
		t.Fatal(err)
	}
	defer os.RemoveAll(tmpDir)

	tests := []struct {
		name             string
		content          string
		shouldContain    []string
		shouldNotContain []string
	}{
		{
			name: "github-models engine with basic configuration",
			content: `---
on: workflow_dispatch
permissions:
  contents: read
  models: read
engine: github-models
---

# GitHub Models Test Workflow

This workflow uses GitHub Models engine.`,
			shouldContain: []string{
				"actions/ai-inference@v1",
				"prompt-file: '/tmp/aw-prompts/prompt.txt'",
				"steps.inference.outputs.response-file",
				"models: read",
			},
			shouldNotContain: []string{
				"npm install",
				"claude --version",
			},
		},
		{
			name: "github-models engine with model specification",
			content: `---
on: workflow_dispatch
permissions:
  contents: read
  models: read
engine:
  id: github-models
  model: gpt-4o
---

# GitHub Models with Model

Test with model specification.`,
			shouldContain: []string{
				"actions/ai-inference@v1",
				"model: 'gpt-4o'",
			},
			shouldNotContain: []string{},
		},
		{
			name: "github-models engine with custom version",
			content: `---
on: workflow_dispatch
permissions:
  contents: read
  models: read
engine:
  id: github-models
  version: v1.2
---

# GitHub Models with Version

Test with custom version.`,
			shouldContain: []string{
				"actions/ai-inference@v1.2",
			},
			shouldNotContain: []string{},
		},
		{
			name: "github-models engine with github tool",
			content: `---
on: workflow_dispatch
permissions:
  contents: read
  models: read
engine: github-models
tools:
  github:
    allowed:
      - get_repository
---

# GitHub Models with GitHub Tool

Test with GitHub MCP.`,
			shouldContain: []string{
				"actions/ai-inference@v1",
				"enable-github-mcp: true",
				"github-mcp-token: ${{ secrets.GITHUB_MCP_TOKEN }}",
			},
			shouldNotContain: []string{},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			// Write test workflow file
			testFile := filepath.Join(tmpDir, "test-workflow.md")
			err := os.WriteFile(testFile, []byte(test.content), 0644)
			if err != nil {
				t.Fatalf("Failed to write test file: %v", err)
			}

			// Compile the workflow
			compiler := NewCompiler(false, "", "test")
			compiler.SetSkipValidation(true) // Skip validation for test simplicity

			err = compiler.CompileWorkflow(testFile)
			if err != nil {
				t.Fatalf("Failed to compile workflow: %v", err)
			}

			// Lock file is automatically generated by CompileWorkflow
			lockFile := strings.TrimSuffix(testFile, ".md") + ".lock.yml"

			// Read the generated content
			content_bytes, err := os.ReadFile(lockFile)
			if err != nil {
				t.Fatalf("Failed to read generated lock file: %v", err)
			}

			contentStr := string(content_bytes)

			// Check that expected strings are present
			for _, expected := range test.shouldContain {
				if !strings.Contains(contentStr, expected) {
					t.Errorf("Expected generated workflow to contain '%s', but it was missing", expected)
				}
			}

			// Check that unwanted strings are not present
			for _, unwanted := range test.shouldNotContain {
				if strings.Contains(contentStr, unwanted) {
					t.Errorf("Expected generated workflow to NOT contain '%s', but it was present", unwanted)
				}
			}
		})
	}
}
