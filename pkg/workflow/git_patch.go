package workflow

import "strings"

// generateGitPatchStep generates a step that creates and uploads a git patch of changes
func (c *Compiler) generateGitPatchStep(yaml *strings.Builder) {
	yaml.WriteString("      - name: Generate git patch\n")
	yaml.WriteString("        if: always()\n")
	yaml.WriteString("        run: |\n")
	yaml.WriteString("          # Check current git status\n")
	yaml.WriteString("          echo \"Current git status:\"\n")
	yaml.WriteString("          git status\n")
	yaml.WriteString("          # Stage any unstaged files\n")
	yaml.WriteString("          git add -A || true\n")
	yaml.WriteString("          # Check updated git status\n")
	yaml.WriteString("          echo \"Updated git status:\"\n")
	yaml.WriteString("          git status\n")
	yaml.WriteString("          # Get the initial commit SHA from the base branch of the pull request\n")
	yaml.WriteString("          if [ \"$GITHUB_EVENT_NAME\" = \"pull_request\" ] || [ \"$GITHUB_EVENT_NAME\" = \"pull_request_review_comment\" ]; then\n")
	yaml.WriteString("            INITIAL_SHA=\"$GITHUB_BASE_REF\"\n")
	yaml.WriteString("          else\n")
	yaml.WriteString("            INITIAL_SHA=\"$GITHUB_SHA\"\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("          echo \"Base commit SHA: $INITIAL_SHA\"\n")
	yaml.WriteString("          # Show compact diff information between initial commit and staged files\n")
	yaml.WriteString("          echo '## Git diff' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("          echo '' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("          echo '```' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("          git diff --cached --name-only \"$INITIAL_SHA\" >> $GITHUB_STEP_SUMMARY || true\n")
	yaml.WriteString("          echo '```' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("          echo '' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("          # Check if there are any changes since the initial commit\n")
	yaml.WriteString("          if git diff --quiet --cached \"$INITIAL_SHA\" && git diff --quiet \"$INITIAL_SHA\" HEAD; then\n")
	yaml.WriteString("            echo \"No changes detected since initial commit (staged or committed)\"\n")
	yaml.WriteString("            echo \"Skipping patch generation - no changes to create patch from\"\n")
	yaml.WriteString("          else\n")
	yaml.WriteString("            echo \"Changes detected, generating patch...\"\n")
	yaml.WriteString("            # Generate patch from initial commit to current state\n")
	yaml.WriteString("            git format-patch \"$INITIAL_SHA\"..HEAD --stdout > /tmp/aw.patch || echo \"Failed to generate patch\" > /tmp/aw.patch\n")
	yaml.WriteString("            echo \"Patch file created at /tmp/aw.patch\"\n")
	yaml.WriteString("            ls -la /tmp/aw.patch\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("      - name: Upload git patch\n")
	yaml.WriteString("        if: always()\n")
	yaml.WriteString("        uses: actions/upload-artifact@v4\n")
	yaml.WriteString("        with:\n")
	yaml.WriteString("          name: aw.patch\n")
	yaml.WriteString("          path: /tmp/aw.patch\n")
	yaml.WriteString("          if-no-files-found: ignore\n")
}
