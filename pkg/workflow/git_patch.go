package workflow

import "strings"

// generateGitPatchStep generates a step that creates and uploads a git patch of changes
func (c *Compiler) generateGitPatchStep(yaml *strings.Builder) {
	yaml.WriteString("      - name: Generate git patch\n")
	yaml.WriteString("        if: always()\n")
	yaml.WriteString("        env:\n")
	yaml.WriteString("          GITHUB_AW_SAFE_OUTPUTS: ${{ env.GITHUB_AW_SAFE_OUTPUTS }}\n")
	yaml.WriteString("          GITHUB_SHA: ${{ github.sha }}\n")
	yaml.WriteString("        run: |\n")
	yaml.WriteString("          # Check current git status\n")
	yaml.WriteString("          echo \"Current git status:\"\n")
	yaml.WriteString("          git status\n")
	yaml.WriteString("          \n")
	yaml.WriteString("          # Extract branch name from JSONL output\n")
	yaml.WriteString("          BRANCH_NAME=\"\"\n")
	yaml.WriteString("          if [ -f \"$GITHUB_AW_SAFE_OUTPUTS\" ]; then\n")
	yaml.WriteString("            echo \"Checking for branch name in JSONL output...\"\n")
	yaml.WriteString("            while IFS= read -r line; do\n")
	yaml.WriteString("              if [ -n \"$line\" ]; then\n")
	yaml.WriteString("                # Extract branch from create-pull-request line using simple grep and sed\n")
	yaml.WriteString("                if echo \"$line\" | grep -q '\"type\"[[:space:]]*:[[:space:]]*\"create-pull-request\"'; then\n")
	yaml.WriteString("                  echo \"Found create-pull-request line: $line\"\n")
	yaml.WriteString("                  # Extract branch value using sed\n")
	yaml.WriteString("                  BRANCH_NAME=$(echo \"$line\" | sed -n 's/.*\"branch\"[[:space:]]*:[[:space:]]*\"\\([^\"]*\\)\".*/\\1/p')\n")
	yaml.WriteString("                  if [ -n \"$BRANCH_NAME\" ]; then\n")
	yaml.WriteString("                    echo \"Extracted branch name from create-pull-request: $BRANCH_NAME\"\n")
	yaml.WriteString("                    break\n")
	yaml.WriteString("                  fi\n")
	yaml.WriteString("                # Extract branch from push-to-pr-branch line using simple grep and sed\n")
	yaml.WriteString("                elif echo \"$line\" | grep -q '\"type\"[[:space:]]*:[[:space:]]*\"push-to-pr-branch\"'; then\n")
	yaml.WriteString("                  echo \"Found push-to-pr-branch line: $line\"\n")
	yaml.WriteString("                  # Extract branch value using sed\n")
	yaml.WriteString("                  BRANCH_NAME=$(echo \"$line\" | sed -n 's/.*\"branch\"[[:space:]]*:[[:space:]]*\"\\([^\"]*\\)\".*/\\1/p')\n")
	yaml.WriteString("                  if [ -n \"$BRANCH_NAME\" ]; then\n")
	yaml.WriteString("                    echo \"Extracted branch name from push-to-pr-branch: $BRANCH_NAME\"\n")
	yaml.WriteString("                    break\n")
	yaml.WriteString("                  fi\n")
	yaml.WriteString("                fi\n")
	yaml.WriteString("              fi\n")
	yaml.WriteString("            done < \"$GITHUB_AW_SAFE_OUTPUTS\"\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("          \n")
	yaml.WriteString("          # If no branch or branch doesn't exist, no patch\n")
	yaml.WriteString("          if [ -z \"$BRANCH_NAME\" ]; then\n")
	yaml.WriteString("            echo \"No branch found, no patch generation\"\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("          \n")
	yaml.WriteString("          # If we have a branch name, check if that branch exists and get its diff\n")
	yaml.WriteString("          if [ -n \"$BRANCH_NAME\" ]; then\n")
	yaml.WriteString("            echo \"Looking for branch: $BRANCH_NAME\"\n")
	yaml.WriteString("            # Check if the branch exists\n")
	yaml.WriteString("            if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then\n")
	yaml.WriteString("              echo \"Branch $BRANCH_NAME exists, generating patch from branch changes\"\n")
	yaml.WriteString("              \n")
	yaml.WriteString("              # Check if origin/$BRANCH_NAME exists to use as base\n")
	yaml.WriteString("              if git show-ref --verify --quiet refs/remotes/origin/$BRANCH_NAME; then\n")
	yaml.WriteString("                echo \"Using origin/$BRANCH_NAME as base for patch generation\"\n")
	yaml.WriteString("                BASE_REF=\"origin/$BRANCH_NAME\"\n")
	yaml.WriteString("              else\n")
	yaml.WriteString("                echo \"origin/$BRANCH_NAME does not exist, using merge-base with default branch\"\n")
	yaml.WriteString("                # Get the default branch name\n")
	yaml.WriteString("                DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')\n")
	yaml.WriteString("                echo \"Default branch: $DEFAULT_BRANCH\"\n")
	yaml.WriteString("                # Find merge base between default branch and current branch\n")
	yaml.WriteString("                BASE_REF=$(git merge-base origin/$DEFAULT_BRANCH $BRANCH_NAME)\n")
	yaml.WriteString("                echo \"Using merge-base as base: $BASE_REF\"\n")
	yaml.WriteString("              fi\n")
	yaml.WriteString("              \n")
	yaml.WriteString("              # Generate patch from the determined base to the branch\n")
	yaml.WriteString("              git format-patch \"$BASE_REF\"..\"$BRANCH_NAME\" --stdout > /tmp/aw.patch || echo \"Failed to generate patch from branch\" > /tmp/aw.patch\n")
	yaml.WriteString("              echo \"Patch file created from branch: $BRANCH_NAME (base: $BASE_REF)\"\n")
	yaml.WriteString("            else\n")
	yaml.WriteString("              echo \"Branch $BRANCH_NAME does not exist, no patch\"\n")
	yaml.WriteString("            fi\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("          \n")
	yaml.WriteString("          # Show patch info if it exists\n")
	yaml.WriteString("          if [ -f /tmp/aw.patch ]; then\n")
	yaml.WriteString("            ls -la /tmp/aw.patch\n")
	yaml.WriteString("            # Show the first 50 lines of the patch for review\n")
	yaml.WriteString("            echo '## Git Patch' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '```diff' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            head -500 /tmp/aw.patch >> $GITHUB_STEP_SUMMARY || echo \"Could not display patch contents\" >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '...' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '```' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("            echo '' >> $GITHUB_STEP_SUMMARY\n")
	yaml.WriteString("          fi\n")
	yaml.WriteString("      - name: Upload git patch\n")
	yaml.WriteString("        if: always()\n")
	yaml.WriteString("        uses: actions/upload-artifact@v4\n")
	yaml.WriteString("        with:\n")
	yaml.WriteString("          name: aw.patch\n")
	yaml.WriteString("          path: /tmp/aw.patch\n")
	yaml.WriteString("          if-no-files-found: ignore\n")
}
