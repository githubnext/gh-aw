package workflow

import (
	"encoding/json"
	"fmt"
	"strconv"
	"strings"
)

// NetworkHookGenerator generates network permission hooks for engine configurations
type NetworkHookGenerator struct{}

// GenerateNetworkHookScript generates a Python hook script for network permissions
func (g *NetworkHookGenerator) GenerateNetworkHookScript(allowedDomains []string) string {
	// Convert domain list to JSON for embedding in Python
	// Ensure empty slice becomes [] not null in JSON
	var domainsJSON string
	if allowedDomains == nil {
		domainsJSON = "[]"
	} else {
		jsonBytes, _ := json.Marshal(allowedDomains)
		domainsJSON = string(jsonBytes)
	}

	// Use strconv.Quote to safely escape the JSON string for Python
	// This prevents any quote-related injection vulnerabilities (CWE-78, CWE-89, CWE-94)
	quotedJSON := strconv.Quote(domainsJSON)

	// Build the Python script using a safe template approach
	// The JSON string is properly quoted and escaped, then parsed at runtime
	return fmt.Sprintf(`#!/usr/bin/env python3
"""
Network permissions validator for Claude Code engine.
Generated by gh-aw from engine network permissions configuration.
"""

import json
import sys
import urllib.parse
import re

# Domain allow-list (populated during generation)
# JSON string is safely escaped using Go's strconv.Quote
ALLOWED_DOMAINS = json.loads(%s)

def extract_domain(url_or_query):
    """Extract domain from URL or search query."""
    if not url_or_query:
        return None
    
    if url_or_query.startswith(('http://', 'https://')):
        return urllib.parse.urlparse(url_or_query).netloc.lower()
    
    # Check for domain patterns in search queries
    match = re.search(r'site:([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})', url_or_query)
    if match:
        return match.group(1).lower()
    
    return None

def is_domain_allowed(domain):
    """Check if domain is allowed."""
    if not domain:
        # If no domain detected, allow only if not under deny-all policy
        return bool(ALLOWED_DOMAINS)  # False if empty list (deny-all), True if has domains
    
    # Empty allowed domains means deny all
    if not ALLOWED_DOMAINS:
        return False
    
    for pattern in ALLOWED_DOMAINS:
        regex = pattern.replace('.', r'\.').replace('*', '.*')
        if re.match(f'^{regex}$', domain):
            return True
    return False

# Main logic
try:
    data = json.load(sys.stdin)
    tool_name = data.get('tool_name', '')
    tool_input = data.get('tool_input', {})
    
    if tool_name not in ['WebFetch', 'WebSearch']:
        sys.exit(0)  # Allow other tools
    
    target = tool_input.get('url') or tool_input.get('query', '')
    domain = extract_domain(target)
    
    # For WebSearch, apply domain restrictions consistently
    # If no domain detected in search query, check if restrictions are in place
    if tool_name == 'WebSearch' and not domain:
        # Since this hook is only generated when network permissions are configured,
        # empty ALLOWED_DOMAINS means deny-all policy
        if not ALLOWED_DOMAINS:  # Empty list means deny all
            print(f"Network access blocked: deny-all policy in effect", file=sys.stderr)
            print(f"No domains are allowed for WebSearch", file=sys.stderr)
            sys.exit(2)  # Block under deny-all policy
        else:
            print(f"Network access blocked for web-search: no specific domain detected", file=sys.stderr)
            print(f"Allowed domains: {', '.join(ALLOWED_DOMAINS)}", file=sys.stderr)
            sys.exit(2)  # Block general searches when domain allowlist is configured
    
    if not is_domain_allowed(domain):
        print(f"Network access blocked for domain: {domain}", file=sys.stderr)
        print(f"Allowed domains: {', '.join(ALLOWED_DOMAINS)}", file=sys.stderr)
        sys.exit(2)  # Block with feedback to Claude
    
    sys.exit(0)  # Allow
    
except Exception as e:
    print(f"Network validation error: {e}", file=sys.stderr)
    sys.exit(2)  # Block on errors
`, quotedJSON)
}

// GenerateNetworkHookWorkflowStep generates a GitHub Actions workflow step that creates the network permissions hook
func (g *NetworkHookGenerator) GenerateNetworkHookWorkflowStep(allowedDomains []string) GitHubActionStep {
	hookScript := g.GenerateNetworkHookScript(allowedDomains)

	// No escaping needed for heredoc with 'EOF' - it's literal
	runContent := fmt.Sprintf(`mkdir -p .claude/hooks
cat > .claude/hooks/network_permissions.py << 'EOF'
%s
EOF
chmod +x .claude/hooks/network_permissions.py`, hookScript)

	var lines []string
	lines = append(lines, "      - name: Generate Network Permissions Hook")
	lines = append(lines, "        run: |")

	// Split the run content into lines and properly indent
	runLines := strings.Split(runContent, "\n")
	for _, line := range runLines {
		lines = append(lines, fmt.Sprintf("          %s", line))
	}

	return GitHubActionStep(lines)
}

// ShouldEnforceNetworkPermissions checks if network permissions should be enforced
// Returns true if network permissions are configured and not in "defaults" mode
func ShouldEnforceNetworkPermissions(network *NetworkPermissions) bool {
	if network == nil {
		return false // No network config, defaults to full access
	}
	if network.Mode == "defaults" {
		return true // "defaults" mode uses restricted allow-list (enforcement needed)
	}
	return true // Object format means some restriction is configured
}

// HasNetworkPermissions is deprecated - use ShouldEnforceNetworkPermissions instead
// Kept for backwards compatibility but will be removed in future versions
func HasNetworkPermissions(engineConfig *EngineConfig) bool {
	// This function is now deprecated since network permissions are top-level
	// Return false for backwards compatibility
	return false
}
