/**
 * Generate footer with AI attribution and workflow installation instructions
 * @param {string} workflowName - Name of the workflow
 * @param {string} runUrl - URL of the workflow run
 * @param {string} workflowSource - Source of the workflow (owner/repo/path@ref)
 * @param {string} workflowSourceURL - GitHub URL for the workflow source
 * @returns {string} Footer text
 */
function generateFooter(workflowName, runUrl, workflowSource, workflowSourceURL) {
  let footer = `\n\n> AI generated by [${workflowName}](${runUrl})`;

  if (workflowSource && workflowSourceURL) {
    footer += `\n>\n> To add this workflow in your repository, run \`gh aw add ${workflowSource}\`. See [usage guide](https://githubnext.github.io/gh-aw/tools/cli/).`;
  }

  footer += "\n";
  return footer;
}

/**
 * Comment on a GitHub Discussion using GraphQL
 * @param {any} github - GitHub REST API instance  
 * @param {string} owner - Repository owner
 * @param {string} repo - Repository name
 * @param {number} discussionNumber - Discussion number
 * @param {string} message - Comment body
 * @returns {Promise<{id: string, html_url: string, discussion_url: string}>} Comment details
 */
async function commentOnDiscussion(github, owner, repo, discussionNumber, message) {
  // 1. Retrieve discussion node ID
  const { repository } = await github.graphql(`
    query($owner: String!, $repo: String!, $num: Int!) {
      repository(owner: $owner, name: $repo) {
        discussion(number: $num) { 
          id 
          url
        }
      }
    }`, { owner, repo, num: discussionNumber });

  if (!repository || !repository.discussion) {
    throw new Error(`Discussion #${discussionNumber} not found in ${owner}/${repo}`);
  }

  const discussionId = repository.discussion.id;
  const discussionUrl = repository.discussion.url;

  // 2. Add comment
  const result = await github.graphql(`
    mutation($dId: ID!, $body: String!) {
      addDiscussionComment(input: { discussionId: $dId, body: $body }) {
        comment { 
          id 
          body 
          createdAt 
          url
        }
      }
    }`, { dId: discussionId, body: message });

  const comment = result.addDiscussionComment.comment;
  
  return {
    id: comment.id,
    html_url: comment.url,
    discussion_url: discussionUrl
  };
}

async function main() {
  // Check if we're in staged mode
  const isStaged = process.env.GITHUB_AW_SAFE_OUTPUTS_STAGED === "true";
  // Check if we're targeting discussions
  const isDiscussion = process.env.GITHUB_AW_COMMENT_DISCUSSION === "true";

  // Read the validated output content from environment variable
  const outputContent = process.env.GITHUB_AW_AGENT_OUTPUT;
  if (!outputContent) {
    core.info("No GITHUB_AW_AGENT_OUTPUT environment variable found");
    return;
  }

  if (outputContent.trim() === "") {
    core.info("Agent output content is empty");
    return;
  }

  core.info(`Agent output content length: ${outputContent.length}`);

  // Parse the validated output JSON
  let validatedOutput;
  try {
    validatedOutput = JSON.parse(outputContent);
  } catch (error) {
    core.setFailed(`Error parsing agent output JSON: ${error instanceof Error ? error.message : String(error)}`);
    return;
  }

  if (!validatedOutput.items || !Array.isArray(validatedOutput.items)) {
    core.info("No valid items found in agent output");
    return;
  }

  // Find all add-comment items
  const commentItems = validatedOutput.items.filter(/** @param {any} item */ item => item.type === "add-comment");
  if (commentItems.length === 0) {
    core.info("No add-comment items found in agent output");
    return;
  }

  core.info(`Found ${commentItems.length} add-comment item(s)`);

  // Helper function to get the repository URL for different purposes
  function getRepositoryUrl() {
    // For trial mode, use target repository for issue/PR URLs but execution context for action runs
    const targetRepoSlug = process.env.GITHUB_AW_TARGET_REPO_SLUG;

    if (targetRepoSlug) {
      // Use target repository for issue/PR URLs in trial mode
      const githubServer = process.env.GITHUB_SERVER_URL || "https://github.com";
      return `${githubServer}/${targetRepoSlug}`;
    } else if (context.payload.repository) {
      // Use execution context repository (default behavior)
      return context.payload.repository.html_url;
    } else {
      // Final fallback for action runs when context repo is not available
      const githubServer = process.env.GITHUB_SERVER_URL || "https://github.com";
      return `${githubServer}/${context.repo.owner}/${context.repo.repo}`;
    }
  }

  // Helper function to get the target number (issue, discussion, or pull request)
  function getTargetNumber(item) {
    if (item.issue_number !== undefined) {
      return item.issue_number;
    }
    if (item.pull_number !== undefined) {
      return item.pull_number;
    }
    if (item.discussion_number !== undefined) {
      return item.discussion_number;
    }
    return undefined;
  }

  // If in staged mode, emit step summary instead of creating comments
  if (isStaged) {
    let summaryContent = "## 🎭 Staged Mode: Add Comments Preview\n\n";
    summaryContent += "The following comments would be added if staged mode was disabled:\n\n";

    for (let i = 0; i < commentItems.length; i++) {
      const item = commentItems[i];
      summaryContent += `### Comment ${i + 1}\n`;
      const targetNumber = getTargetNumber(item);
      if (targetNumber) {
        const repoUrl = getRepositoryUrl();
        if (isDiscussion) {
          const discussionUrl = `${repoUrl}/discussions/${targetNumber}`;
          summaryContent += `**Target Discussion:** [#${targetNumber}](${discussionUrl})\n\n`;
        } else {
          const issueUrl = `${repoUrl}/issues/${targetNumber}`;
          summaryContent += `**Target Issue:** [#${targetNumber}](${issueUrl})\n\n`;
        }
      } else {
        if (isDiscussion) {
          summaryContent += `**Target:** Current discussion\n\n`;
        } else {
          summaryContent += `**Target:** Current issue/PR\n\n`;
        }
      }
      summaryContent += `**Body:**\n${item.body || "No content provided"}\n\n`;
      summaryContent += "---\n\n";
    }

    // Write to step summary
    await core.summary.addRaw(summaryContent).write();
    core.info("📝 Comment creation preview written to step summary");
    return;
  }

  // Get the target configuration from environment variable
  const commentTarget = process.env.GITHUB_AW_COMMENT_TARGET || "triggering";
  core.info(`Comment target configuration: ${commentTarget}`);
  core.info(`Discussion mode: ${isDiscussion}`);

  // Check if we're in an issue or pull request context
  const isIssueContext = context.eventName === "issues" || context.eventName === "issue_comment";
  const isPRContext =
    context.eventName === "pull_request" ||
    context.eventName === "pull_request_review" ||
    context.eventName === "pull_request_review_comment";

  // Validate context based on target configuration
  if (commentTarget === "triggering" && !isIssueContext && !isPRContext) {
    core.info('Target is "triggering" but not running in issue or pull request context, skipping comment creation');
    return;
  }

  const createdComments = [];

  // Process each comment item
  for (let i = 0; i < commentItems.length; i++) {
    const commentItem = commentItems[i];
    core.info(`Processing add-comment item ${i + 1}/${commentItems.length}: bodyLength=${commentItem.body.length}`);

    // Determine the issue/PR number and comment endpoint for this comment
    let issueNumber;
    let commentEndpoint;

    if (commentTarget === "*") {
      // For target "*", we need an explicit number from the comment item
      const targetNumber = getTargetNumber(commentItem);
      if (targetNumber) {
        issueNumber = parseInt(targetNumber, 10);
        if (isNaN(issueNumber) || issueNumber <= 0) {
          core.info(`Invalid target number specified: ${targetNumber}`);
          continue;
        }
        commentEndpoint = isDiscussion ? "discussions" : "issues";
      } else {
        const expectedFields = isDiscussion ? "discussion_number" : "issue_number or pull_number";
        core.info(`Target is "*" but no ${expectedFields} specified in comment item`);
        continue;
      }
    } else if (commentTarget && commentTarget !== "triggering") {
      // Explicit number specified in target configuration
      issueNumber = parseInt(commentTarget, 10);
      if (isNaN(issueNumber) || issueNumber <= 0) {
        core.info(`Invalid target number in target configuration: ${commentTarget}`);
        continue;
      }
      commentEndpoint = isDiscussion ? "discussions" : "issues";
    } else {
      // Default behavior: use triggering issue/PR
      if (isIssueContext) {
        if (context.payload.issue) {
          issueNumber = context.payload.issue.number;
          commentEndpoint = "issues";
        } else {
          core.info("Issue context detected but no issue found in payload");
          continue;
        }
      } else if (isPRContext) {
        if (context.payload.pull_request) {
          issueNumber = context.payload.pull_request.number;
          commentEndpoint = "issues"; // PR comments use the issues API endpoint
        } else {
          core.info("Pull request context detected but no pull request found in payload");
          continue;
        }
      }
    }

    if (!issueNumber) {
      core.info("Could not determine issue or pull request number");
      continue;
    }

    // Extract body from the JSON item
    let body = commentItem.body.trim();
    // Add AI disclaimer with workflow name and run url
    const workflowName = process.env.GITHUB_AW_WORKFLOW_NAME || "Workflow";
    const workflowSource = process.env.GITHUB_AW_WORKFLOW_SOURCE || "";
    const workflowSourceURL = process.env.GITHUB_AW_WORKFLOW_SOURCE_URL || "";
    const runId = context.runId;
    const githubServer = process.env.GITHUB_SERVER_URL || "https://github.com";
    const runUrl = context.payload.repository
      ? `${context.payload.repository.html_url}/actions/runs/${runId}`
      : `${githubServer}/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
    body += generateFooter(workflowName, runUrl, workflowSource, workflowSourceURL);

    try {
      let comment;
      
      if (isDiscussion) {
        core.info(`Creating comment on discussion #${issueNumber}`);
        core.info(`Comment content length: ${body.length}`);
        
        // Create discussion comment using GraphQL
        comment = await commentOnDiscussion(github, context.repo.owner, context.repo.repo, issueNumber, body);
        core.info("Created discussion comment #" + comment.id + ": " + comment.html_url);
        
        // Add discussion_url to the comment object for consistency
        comment.discussion_url = comment.discussion_url;
      } else {
        core.info(`Creating comment on ${commentEndpoint} #${issueNumber}`);
        core.info(`Comment content length: ${body.length}`);
        
        // Create regular issue/PR comment using REST API
        const { data: restComment } = await github.rest.issues.createComment({
          owner: context.repo.owner,
          repo: context.repo.repo,
          issue_number: issueNumber,
          body: body,
        });
        
        comment = restComment;
        core.info("Created comment #" + comment.id + ": " + comment.html_url);
      }

      createdComments.push(comment);

      // Set output for the last created comment (for backward compatibility)
      if (i === commentItems.length - 1) {
        core.setOutput("comment_id", comment.id);
        core.setOutput("comment_url", comment.html_url);
      }
    } catch (error) {
      core.error(`✗ Failed to create comment: ${error instanceof Error ? error.message : String(error)}`);
      throw error;
    }
  }

  // Write summary for all created comments
  if (createdComments.length > 0) {
    let summaryContent = "\n\n## GitHub Comments\n";
    for (const comment of createdComments) {
      summaryContent += `- Comment #${comment.id}: [View Comment](${comment.html_url})\n`;
    }
    await core.summary.addRaw(summaryContent).write();
  }

  core.info(`Successfully created ${createdComments.length} comment(s)`);
  return createdComments;
}
await main();
