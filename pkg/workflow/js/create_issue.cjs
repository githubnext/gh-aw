async function main() {
  // Read the validated output content from environment variable
  const outputContent = process.env.GITHUB_AW_AGENT_OUTPUT;
  if (!outputContent) {
    console.log('No GITHUB_AW_AGENT_OUTPUT environment variable found');
    return;
  }
  if (outputContent.trim() === '') {
    console.log('Agent output content is empty');
    return;
  }
  
  console.log('Agent output content length:', outputContent.length);
  
  // Parse the validated output JSON
  let validatedOutput;
  try {
    validatedOutput = JSON.parse(outputContent);
  } catch (error) {
    console.log('Error parsing agent output JSON:', error instanceof Error ? error.message : String(error));
    return;
  }

  if (!validatedOutput.items || !Array.isArray(validatedOutput.items)) {
    console.log('No valid items found in agent output');
    return;
  }

  // Find the create-issue item
  const createIssueItem = validatedOutput.items.find(/** @param {any} item */ item => item.type === 'create-issue');
  if (!createIssueItem) {
    console.log('No create-issue item found in agent output');
    return;
  }

  console.log('Found create-issue item:', { title: createIssueItem.title, bodyLength: createIssueItem.body.length });

  // Check if we're in an issue context (triggered by an issue event)
  const parentIssueNumber = context.payload?.issue?.number;
  
  // Parse labels from environment variable (comma-separated string) or from the JSON item
  const labelsEnv = process.env.GITHUB_AW_ISSUE_LABELS;
  let labels = labelsEnv ? labelsEnv.split(',').map(/** @param {string} label */ label => label.trim()).filter(/** @param {string} label */ label => label) : [];
  
  // If the item has labels, use those instead (or merge them)
  if (createIssueItem.labels && Array.isArray(createIssueItem.labels)) {
    labels = [...labels, ...createIssueItem.labels].filter(Boolean);
  }

  // Extract title and body from the JSON item
  let title = createIssueItem.title ? createIssueItem.title.trim() : '';
  let bodyLines = createIssueItem.body.split('\n');

  // If no title was found, use the body content as title (or a default)
  if (!title) {
    title = createIssueItem.body || 'Agent Output';
  }

  // Apply title prefix if provided via environment variable
  const titlePrefix = process.env.GITHUB_AW_ISSUE_TITLE_PREFIX;
  if (titlePrefix && !title.startsWith(titlePrefix)) {
    title = titlePrefix + title;
  }

  if (parentIssueNumber) {
    console.log('Detected issue context, parent issue #' + parentIssueNumber);

    // Add reference to parent issue in the child issue body
    bodyLines.push(`Related to #${parentIssueNumber}`);
  }

  // Add AI disclaimer with run id, run htmlurl
  // Add AI disclaimer with workflow run information
  const runId = context.runId;
  const runUrl = context.payload.repository 
    ? `${context.payload.repository.html_url}/actions/runs/${runId}`
    : `https://github.com/actions/runs/${runId}`;  
  bodyLines.push(``, ``, `> Generated by Agentic Workflow Run [${runId}](${runUrl})`, '');

  // Prepare the body content
  const body = bodyLines.join('\n').trim();

  console.log('Creating issue with title:', title);
  console.log('Labels:', labels);
  console.log('Body length:', body.length);


  // Create the issue using GitHub API
  const { data: issue } = await github.rest.issues.create({
    owner: context.repo.owner,
    repo: context.repo.repo,
    title: title,
    body: body,
    labels: labels
  });

  console.log('Created issue #' + issue.number + ': ' + issue.html_url);

  // If we have a parent issue, add a comment to it referencing the new child issue
  if (parentIssueNumber) {
    try {
      await github.rest.issues.createComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: parentIssueNumber,
        body: `Created related issue: #${issue.number}`
      });
      console.log('Added comment to parent issue #' + parentIssueNumber);
    } catch (error) {
      console.log('Warning: Could not add comment to parent issue:', error instanceof Error ? error.message : String(error));
    }
  }

  // Set output for other jobs to use
  core.setOutput('issue_number', issue.number);
  core.setOutput('issue_url', issue.html_url);
  // write issue to summary
  await core.summary.addRaw(`

## GitHub Issue
- Issue ID: ${issue.number}
- Issue URL: ${issue.html_url}
`).write();
}
await main();