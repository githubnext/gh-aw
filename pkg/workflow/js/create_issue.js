function sanitizeLabelContent(content) {
    if (!content || typeof content !== "string") {
        return "";
    }
    let sanitized = content.trim();
    sanitized = sanitized.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, "");
    sanitized = sanitized.replace(/\x1b\[[0-9;]*[mGKH]/g, "");
    sanitized = sanitized.replace(/(^|[^\w`])@([A-Za-z0-9](?:[A-Za-z0-9-]{0,37}[A-Za-z0-9])?(?:\/[A-Za-z0-9._-]+)?)/g, (_m, p1, p2) => `${p1}\`@${p2}\``);
    sanitized = sanitized.replace(/[<>&'"]/g, "");
    return sanitized.trim();
}
async function main() {
    const isStaged = process.env.GITHUB_AW_SAFE_OUTPUTS_STAGED === "true";
    const outputContent = process.env.GITHUB_AW_AGENT_OUTPUT;
    if (!outputContent) {
        core.info("No GITHUB_AW_AGENT_OUTPUT environment variable found");
        return;
    }
    if (outputContent.trim() === "") {
        core.info("Agent output content is empty");
        return;
    }
    core.info(`Agent output content length: ${outputContent.length}`);
    let validatedOutput;
    try {
        validatedOutput = JSON.parse(outputContent);
    }
    catch (error) {
        core.setFailed(`Error parsing agent output JSON: ${error instanceof Error ? error.message : String(error)}`);
        return;
    }
    if (!validatedOutput.items || !Array.isArray(validatedOutput.items)) {
        core.info("No valid items found in agent output");
        return;
    }
    const createIssueItems = validatedOutput.items.filter(item => item.type === "create-issue");
    if (createIssueItems.length === 0) {
        core.info("No create-issue items found in agent output");
        return;
    }
    core.info(`Found ${createIssueItems.length} create-issue item(s)`);
    if (isStaged) {
        let summaryContent = "## 🎭 Staged Mode: Create Issues Preview\n\n";
        summaryContent += "The following issues would be created if staged mode was disabled:\n\n";
        for (let i = 0; i < createIssueItems.length; i++) {
            const item = createIssueItems[i];
            summaryContent += `### Issue ${i + 1}\n`;
            summaryContent += `**Title:** ${item.title || "No title provided"}\n\n`;
            if (item.body) {
                summaryContent += `**Body:**\n${item.body}\n\n`;
            }
            if (item.labels && item.labels.length > 0) {
                summaryContent += `**Labels:** ${item.labels.join(", ")}\n\n`;
            }
            summaryContent += "---\n\n";
        }
        await core.summary.addRaw(summaryContent).write();
        core.info("📝 Issue creation preview written to step summary");
        return;
    }
    const parentIssueNumber = context.payload?.issue?.number;
    const labelsEnv = process.env.GITHUB_AW_ISSUE_LABELS;
    let envLabels = labelsEnv
        ? labelsEnv
            .split(",")
            .map((label) => label.trim())
            .filter((label) => label)
        : [];
    const createdIssues = [];
    for (let i = 0; i < createIssueItems.length; i++) {
        const createIssueItem = createIssueItems[i];
        core.info(`Processing create-issue item ${i + 1}/${createIssueItems.length}: title=${createIssueItem.title}, bodyLength=${createIssueItem.body.length}`);
        let labels = [...envLabels];
        if (createIssueItem.labels && Array.isArray(createIssueItem.labels)) {
            labels = [...labels, ...createIssueItem.labels];
        }
        labels = labels
            .filter(label => label != null && label !== false && label !== 0)
            .map(label => String(label).trim())
            .filter(label => label)
            .map(label => sanitizeLabelContent(label))
            .filter(label => label)
            .map(label => (label.length > 64 ? label.substring(0, 64) : label))
            .filter((label, index, arr) => arr.indexOf(label) === index);
        let title = createIssueItem.title ? createIssueItem.title.trim() : "";
        let bodyLines = createIssueItem.body.split("\n");
        if (!title) {
            title = createIssueItem.body || "Agent Output";
        }
        const titlePrefix = process.env.GITHUB_AW_ISSUE_TITLE_PREFIX;
        if (titlePrefix && !title.startsWith(titlePrefix)) {
            title = titlePrefix + title;
        }
        if (parentIssueNumber) {
            core.info("Detected issue context, parent issue #" + parentIssueNumber);
            bodyLines.push(`Related to #${parentIssueNumber}`);
        }
        const workflowName = process.env.GITHUB_AW_WORKFLOW_NAME || "Workflow";
        const runId = context.runId;
        const runUrl = context.payload.repository
            ? `${context.payload.repository.html_url}/actions/runs/${runId}`
            : `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
        bodyLines.push(``, ``, `> AI generated by [${workflowName}](${runUrl})`, "");
        const body = bodyLines.join("\n").trim();
        core.info(`Creating issue with title: ${title}`);
        core.info(`Labels: ${labels}`);
        core.info(`Body length: ${body.length}`);
        try {
            const { data: issue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: labels,
            });
            core.info("Created issue #" + issue.number + ": " + issue.html_url);
            createdIssues.push(issue);
            if (parentIssueNumber) {
                try {
                    await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: parentIssueNumber,
                        body: `Created related issue: #${issue.number}`,
                    });
                    core.info("Added comment to parent issue #" + parentIssueNumber);
                }
                catch (error) {
                    core.info(`Warning: Could not add comment to parent issue: ${error instanceof Error ? error.message : String(error)}`);
                }
            }
            if (i === createIssueItems.length - 1) {
                core.setOutput("issue_number", issue.number);
                core.setOutput("issue_url", issue.html_url);
            }
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            if (errorMessage.includes("Issues has been disabled in this repository")) {
                core.info(`⚠ Cannot create issue "${title}": Issues are disabled for this repository`);
                core.info("Consider enabling issues in repository settings if you want to create issues automatically");
                continue;
            }
            core.error(`✗ Failed to create issue "${title}": ${errorMessage}`);
            throw error;
        }
    }
    if (createdIssues.length > 0) {
        let summaryContent = "\n\n## GitHub Issues\n";
        for (const issue of createdIssues) {
            summaryContent += `- Issue #${issue.number}: [${issue.title}](${issue.html_url})\n`;
        }
        await core.summary.addRaw(summaryContent).write();
    }
    core.info(`Successfully created ${createdIssues.length} issue(s)`);
}
(async () => {
    await main();
})();
