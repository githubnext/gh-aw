package cli

import (
	"os"
	"path/filepath"
	"testing"
)

// TestFirewallLogIntegration tests the complete firewall log analysis pipeline
func TestFirewallLogIntegration(t *testing.T) {
	// Create a temporary directory for the test
	tempDir := t.TempDir()
	runDir := filepath.Join(tempDir, "run-12345")
	err := os.MkdirAll(runDir, 0755)
	if err != nil {
		t.Fatalf("Failed to create run directory: %v", err)
	}

	// Create a subdirectory for firewall logs
	firewallLogsDir := filepath.Join(runDir, "firewall-logs")
	err = os.MkdirAll(firewallLogsDir, 0755)
	if err != nil {
		t.Fatalf("Failed to create firewall-logs directory: %v", err)
	}

	// Create realistic firewall log content based on the referenced run
	// https://github.com/githubnext/gh-aw/actions/runs/18795259023
	realWorldLogContent := `# Firewall Access Log
# Generated by GitHub Agentic Workflows
1761332530.474 172.30.0.20:35288 api.enterprise.githubcopilot.com:443 140.82.112.22:443 1.1 CONNECT 200 TCP_TUNNEL:HIER_DIRECT api.enterprise.githubcopilot.com:443 "Mozilla/5.0 (compatible; Copilot/1.0)"
1761332531.123 172.30.0.20:35289 api.github.com:443 140.82.112.6:443 1.1 CONNECT 200 TCP_TUNNEL:HIER_DIRECT api.github.com:443 "Mozilla/5.0"
1761332532.456 172.30.0.20:35290 registry.npmjs.org:443 104.16.18.35:443 1.1 CONNECT 200 TCP_TUNNEL:HIER_DIRECT registry.npmjs.org:443 "-"
1761332533.789 172.30.0.20:35291 blocked-domain.example.com:443 0.0.0.0:0 1.1 CONNECT 403 NONE_NONE:HIER_NONE blocked-domain.example.com:443 "-"
1761332534.012 172.30.0.20:35292 denied.malicious.site:443 0.0.0.0:0 1.1 CONNECT 403 TCP_DENIED:HIER_NONE denied.malicious.site:443 "-"
1761332535.234 172.30.0.20:35293 pypi.org:443 151.101.0.63:443 1.1 CONNECT 200 TCP_TUNNEL:HIER_DIRECT pypi.org:443 "pip/23.0"
# Additional requests
1761332536.456 172.30.0.20:35294 api.github.com:443 140.82.112.6:443 1.1 GET 200 TCP_HIT:HIER_DIRECT api.github.com/repos/githubnext/gh-aw "-"
1761332537.678 172.30.0.20:35295 blocked-domain.example.com:443 0.0.0.0:0 1.1 CONNECT 403 NONE_NONE:HIER_NONE blocked-domain.example.com:443 "-"
`

	// Write firewall log file
	logPath := filepath.Join(firewallLogsDir, "firewall-access.log")
	err = os.WriteFile(logPath, []byte(realWorldLogContent), 0644)
	if err != nil {
		t.Fatalf("Failed to create firewall log file: %v", err)
	}

	// Analyze the firewall logs
	analysis, err := analyzeFirewallLogs(runDir, true)
	if err != nil {
		t.Fatalf("Failed to analyze firewall logs: %v", err)
	}

	if analysis == nil {
		t.Fatal("Expected analysis result, got nil")
	}

	// Verify the analysis results
	expectedTotalRequests := 8
	if analysis.TotalRequests != expectedTotalRequests {
		t.Errorf("TotalRequests: got %d, want %d", analysis.TotalRequests, expectedTotalRequests)
	}

	expectedAllowedRequests := 5
	if analysis.AllowedRequests != expectedAllowedRequests {
		t.Errorf("AllowedRequests: got %d, want %d", analysis.AllowedRequests, expectedAllowedRequests)
	}

	expectedDeniedRequests := 3
	if analysis.DeniedRequests != expectedDeniedRequests {
		t.Errorf("DeniedRequests: got %d, want %d", analysis.DeniedRequests, expectedDeniedRequests)
	}

	// Verify allowed domains
	expectedAllowedDomains := []string{
		"api.enterprise.githubcopilot.com:443",
		"api.github.com:443",
		"pypi.org:443",
		"registry.npmjs.org:443",
	}
	if len(analysis.AllowedDomains) != len(expectedAllowedDomains) {
		t.Errorf("AllowedDomains count: got %d, want %d", len(analysis.AllowedDomains), len(expectedAllowedDomains))
	}
	for i, domain := range expectedAllowedDomains {
		if i >= len(analysis.AllowedDomains) {
			break
		}
		if analysis.AllowedDomains[i] != domain {
			t.Errorf("AllowedDomains[%d]: got %q, want %q", i, analysis.AllowedDomains[i], domain)
		}
	}

	// Verify denied domains
	expectedDeniedDomains := []string{
		"blocked-domain.example.com:443",
		"denied.malicious.site:443",
	}
	if len(analysis.DeniedDomains) != len(expectedDeniedDomains) {
		t.Errorf("DeniedDomains count: got %d, want %d", len(analysis.DeniedDomains), len(expectedDeniedDomains))
	}
	for i, domain := range expectedDeniedDomains {
		if i >= len(analysis.DeniedDomains) {
			break
		}
		if analysis.DeniedDomains[i] != domain {
			t.Errorf("DeniedDomains[%d]: got %q, want %q", i, analysis.DeniedDomains[i], domain)
		}
	}

	// Verify per-domain statistics
	// api.github.com should have 2 allowed requests
	if stats, ok := analysis.RequestsByDomain["api.github.com:443"]; ok {
		if stats.Allowed != 2 {
			t.Errorf("api.github.com:443 Allowed: got %d, want 2", stats.Allowed)
		}
		if stats.Denied != 0 {
			t.Errorf("api.github.com:443 Denied: got %d, want 0", stats.Denied)
		}
	} else {
		t.Error("api.github.com:443 not found in RequestsByDomain")
	}

	// blocked-domain.example.com should have 2 denied requests
	if stats, ok := analysis.RequestsByDomain["blocked-domain.example.com:443"]; ok {
		if stats.Allowed != 0 {
			t.Errorf("blocked-domain.example.com:443 Allowed: got %d, want 0", stats.Allowed)
		}
		if stats.Denied != 2 {
			t.Errorf("blocked-domain.example.com:443 Denied: got %d, want 2", stats.Denied)
		}
	} else {
		t.Error("blocked-domain.example.com:443 not found in RequestsByDomain")
	}
}

// TestFirewallLogSummaryBuilding tests the aggregation of firewall logs across multiple runs
func TestFirewallLogSummaryBuilding(t *testing.T) {
	// Create mock processed runs with firewall analysis
	processedRuns := []ProcessedRun{
		{
			Run: WorkflowRun{
				WorkflowName: "workflow-1",
			},
			FirewallAnalysis: &FirewallAnalysis{
				TotalRequests:   10,
				AllowedRequests: 8,
				DeniedRequests:  2,
				AllowedDomains:  []string{"api.github.com:443", "api.npmjs.org:443"},
				DeniedDomains:   []string{"blocked.example.com:443"},
				RequestsByDomain: map[string]DomainRequestStats{
					"api.github.com:443":      {Allowed: 5, Denied: 0},
					"api.npmjs.org:443":       {Allowed: 3, Denied: 0},
					"blocked.example.com:443": {Allowed: 0, Denied: 2},
				},
			},
		},
		{
			Run: WorkflowRun{
				WorkflowName: "workflow-2",
			},
			FirewallAnalysis: &FirewallAnalysis{
				TotalRequests:   5,
				AllowedRequests: 3,
				DeniedRequests:  2,
				AllowedDomains:  []string{"api.github.com:443"},
				DeniedDomains:   []string{"denied.site:443"},
				RequestsByDomain: map[string]DomainRequestStats{
					"api.github.com:443": {Allowed: 3, Denied: 0},
					"denied.site:443":    {Allowed: 0, Denied: 2},
				},
			},
		},
	}

	// Build the firewall log summary
	summary := buildFirewallLogSummary(processedRuns)

	if summary == nil {
		t.Fatal("Expected summary, got nil")
	}

	// Verify aggregated totals
	expectedTotalRequests := 15
	if summary.TotalRequests != expectedTotalRequests {
		t.Errorf("TotalRequests: got %d, want %d", summary.TotalRequests, expectedTotalRequests)
	}

	expectedAllowedRequests := 11
	if summary.AllowedRequests != expectedAllowedRequests {
		t.Errorf("AllowedRequests: got %d, want %d", summary.AllowedRequests, expectedAllowedRequests)
	}

	expectedDeniedRequests := 4
	if summary.DeniedRequests != expectedDeniedRequests {
		t.Errorf("DeniedRequests: got %d, want %d", summary.DeniedRequests, expectedDeniedRequests)
	}

	// Verify unique domains
	expectedAllowedCount := 2
	if len(summary.AllowedDomains) != expectedAllowedCount {
		t.Errorf("AllowedDomains count: got %d, want %d", len(summary.AllowedDomains), expectedAllowedCount)
	}

	expectedDeniedCount := 2
	if len(summary.DeniedDomains) != expectedDeniedCount {
		t.Errorf("DeniedDomains count: got %d, want %d", len(summary.DeniedDomains), expectedDeniedCount)
	}

	// Verify aggregated per-domain stats
	// api.github.com should have 8 allowed requests (5 + 3)
	if stats, ok := summary.RequestsByDomain["api.github.com:443"]; ok {
		if stats.Allowed != 8 {
			t.Errorf("api.github.com:443 aggregated Allowed: got %d, want 8", stats.Allowed)
		}
	} else {
		t.Error("api.github.com:443 not found in aggregated RequestsByDomain")
	}

	// Verify by-workflow breakdown
	if len(summary.ByWorkflow) != 2 {
		t.Errorf("ByWorkflow count: got %d, want 2", len(summary.ByWorkflow))
	}

	if workflow1, ok := summary.ByWorkflow["workflow-1"]; ok {
		if workflow1.TotalRequests != 10 {
			t.Errorf("workflow-1 TotalRequests: got %d, want 10", workflow1.TotalRequests)
		}
	} else {
		t.Error("workflow-1 not found in ByWorkflow")
	}
}
