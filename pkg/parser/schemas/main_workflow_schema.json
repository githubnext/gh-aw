{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "Workflow name that appears in the GitHub Actions interface. If not specified, defaults to the filename without extension."
    },
    "description": {
      "type": "string",
      "description": "Optional workflow description that is rendered as a comment in the generated GitHub Actions YAML file (.lock.yml)"
    },
    "source": {
      "type": "string",
      "description": "Optional source reference indicating where this workflow was added from. Format: owner/repo/path@ref (e.g., githubnext/agentics/workflows/ci-doctor.md@v1.0.0). Rendered as a comment in the generated lock file."
    },
    "imports": {
      "type": "array",
      "description": "Optional array of workflow specifications to import (similar to @include directives but defined in frontmatter). Format: owner/repo/path@ref (e.g., githubnext/agentics/workflows/shared/common.md@v1.0.0).",
      "items": {
        "type": "string",
        "description": "Workflow specification in format owner/repo/path@ref"
      }
    },
    "on": {
      "description": "Workflow triggers that define when the agentic workflow should run. Supports standard GitHub Actions trigger events plus special command triggers for /commands (required)",
      "oneOf": [
        {
          "type": "string",
          "description": "Simple trigger event name (e.g., 'push', 'issues', 'pull_request', 'discussion', 'schedule', 'fork', 'create', 'delete', 'public', 'watch', 'workflow_call')"
        },
        {
          "type": "object",
          "description": "Complex trigger configuration with event-specific filters and options",
          "properties": {
            "command": {
              "description": "Special command trigger for /command workflows (e.g., '/my-bot' in issue comments). Creates conditions to match slash commands automatically.",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Null command configuration - defaults to using the workflow filename (without .md extension) as the command name"
                },
                {
                  "type": "string",
                  "description": "Command name as a string (shorthand format, e.g., 'customname' for '/customname' triggers)"
                },
                {
                  "type": "object",
                  "description": "Command configuration object with custom command name",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Custom command name for slash commands (e.g., 'helper-bot' for '/helper-bot' triggers). Defaults to workflow filename without .md extension if not specified."
                    },
                    "events": {
                      "description": "Events where the command should be active. Default is all comment-related events ('*'). Use GitHub Actions event names.",
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "Single event name or '*' for all events. Use GitHub Actions event names: 'issues', 'issue_comment', 'pull_request_comment', 'pull_request', 'pull_request_review_comment', 'discussion', 'discussion_comment'.",
                          "enum": [
                            "*",
                            "issues",
                            "issue_comment",
                            "pull_request_comment",
                            "pull_request",
                            "pull_request_review_comment",
                            "discussion",
                            "discussion_comment"
                          ]
                        },
                        {
                          "type": "array",
                          "description": "Array of event names where the command should be active. Use GitHub Actions event names.",
                          "items": {
                            "type": "string",
                            "description": "GitHub Actions event name.",
                            "enum": [
                              "*",
                              "issues",
                              "issue_comment",
                              "pull_request_comment",
                              "pull_request",
                              "pull_request_review_comment",
                              "discussion",
                              "discussion_comment"
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "push": {
              "description": "Push event trigger that runs the workflow when code is pushed to the repository",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "branches": {
                  "type": "array",
                  "description": "Branches to filter on",
                  "items": {
                    "type": "string"
                  }
                },
                "branches-ignore": {
                  "type": "array",
                  "description": "Branches to ignore",
                  "items": {
                    "type": "string"
                  }
                },
                "paths": {
                  "type": "array",
                  "description": "Paths to filter on",
                  "items": {
                    "type": "string"
                  }
                },
                "paths-ignore": {
                  "type": "array",
                  "description": "Paths to ignore",
                  "items": {
                    "type": "string"
                  }
                },
                "tags": {
                  "type": "array",
                  "description": "List of git tag names or patterns to include for push events (supports wildcards)",
                  "items": {
                    "type": "string"
                  }
                },
                "tags-ignore": {
                  "type": "array",
                  "description": "List of git tag names or patterns to exclude from push events (supports wildcards)",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "pull_request": {
              "description": "Pull request event trigger that runs the workflow when pull requests are created, updated, or closed",
              "type": "object",
              "properties": {
                "types": {
                  "type": "array",
                  "description": "List of pull request event types to trigger on",
                  "items": {
                    "type": "string",
                    "enum": [
                      "assigned",
                      "unassigned",
                      "labeled",
                      "unlabeled",
                      "opened",
                      "edited",
                      "closed",
                      "reopened",
                      "synchronize",
                      "converted_to_draft",
                      "locked",
                      "unlocked",
                      "enqueued",
                      "dequeued",
                      "milestoned",
                      "demilestoned",
                      "ready_for_review",
                      "review_requested",
                      "review_request_removed",
                      "auto_merge_enabled",
                      "auto_merge_disabled"
                    ]
                  }
                },
                "branches": {
                  "type": "array",
                  "description": "Branches to filter on",
                  "items": {
                    "type": "string"
                  }
                },
                "branches-ignore": {
                  "type": "array",
                  "description": "Branches to ignore",
                  "items": {
                    "type": "string"
                  }
                },
                "paths": {
                  "type": "array",
                  "description": "Paths to filter on",
                  "items": {
                    "type": "string"
                  }
                },
                "paths-ignore": {
                  "type": "array",
                  "description": "Paths to ignore",
                  "items": {
                    "type": "string"
                  }
                },
                "draft": {
                  "type": "boolean",
                  "description": "Filter by draft pull request state. Set to false to exclude draft PRs, true to include only drafts, or omit to include both"
                },
                "forks": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Single fork pattern (e.g., '*' for all forks, 'org/*' for org glob, 'org/repo' for exact match)"
                    },
                    {
                      "type": "array",
                      "description": "List of allowed fork repositories with glob support (e.g., 'org/repo', 'org/*', '*' for all forks)",
                      "items": {
                        "type": "string",
                        "description": "Repository pattern with optional glob support"
                      }
                    }
                  ]
                },
                "names": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Single label name to filter labeled/unlabeled events (e.g., 'bug')"
                    },
                    {
                      "type": "array",
                      "description": "List of label names to filter labeled/unlabeled events. Only applies when 'labeled' or 'unlabeled' is in the types array",
                      "items": {
                        "type": "string",
                        "description": "Label name"
                      }
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            "issues": {
              "description": "Issues event trigger that runs the workflow when repository issues are created, updated, or managed",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of issue events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "opened",
                      "edited",
                      "deleted",
                      "transferred",
                      "pinned",
                      "unpinned",
                      "closed",
                      "reopened",
                      "assigned",
                      "unassigned",
                      "labeled",
                      "unlabeled",
                      "locked",
                      "unlocked",
                      "milestoned",
                      "demilestoned",
                      "typed",
                      "untyped"
                    ]
                  }
                },
                "names": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Single label name to filter labeled/unlabeled events (e.g., 'bug')"
                    },
                    {
                      "type": "array",
                      "description": "List of label names to filter labeled/unlabeled events. Only applies when 'labeled' or 'unlabeled' is in the types array",
                      "items": {
                        "type": "string",
                        "description": "Label name"
                      }
                    }
                  ]
                }
              }
            },
            "issue_comment": {
              "description": "Issue comment event trigger",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of issue comment events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "created",
                      "edited",
                      "deleted"
                    ]
                  }
                }
              }
            },
            "discussion": {
              "description": "Discussion event trigger that runs the workflow when repository discussions are created, updated, or managed",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of discussion events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "created",
                      "edited",
                      "deleted",
                      "transferred",
                      "pinned",
                      "unpinned",
                      "labeled",
                      "unlabeled",
                      "locked",
                      "unlocked",
                      "category_changed",
                      "answered",
                      "unanswered"
                    ]
                  }
                }
              }
            },
            "discussion_comment": {
              "description": "Discussion comment event trigger that runs the workflow when comments on discussions are created, updated, or deleted",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of discussion comment events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "created",
                      "edited",
                      "deleted"
                    ]
                  }
                }
              }
            },
            "schedule": {
              "type": "array",
              "description": "Scheduled trigger events",
              "items": {
                "type": "object",
                "properties": {
                  "cron": {
                    "type": "string",
                    "description": "Cron expression for schedule"
                  }
                },
                "required": [
                  "cron"
                ],
                "additionalProperties": false
              }
            },
            "workflow_dispatch": {
              "description": "Manual workflow dispatch trigger",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple workflow dispatch trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "inputs": {
                      "type": "object",
                      "description": "Input parameters for manual dispatch",
                      "additionalProperties": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "description": {
                            "type": "string",
                            "description": "Input description"
                          },
                          "required": {
                            "type": "boolean",
                            "description": "Whether input is required"
                          },
                          "default": {
                            "type": "string",
                            "description": "Default value"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "string",
                              "choice",
                              "boolean"
                            ],
                            "description": "Input type"
                          },
                          "options": {
                            "type": "array",
                            "description": "Options for choice type",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            },
            "workflow_run": {
              "description": "Workflow run trigger",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "workflows": {
                  "type": "array",
                  "description": "List of workflows to trigger on",
                  "items": {
                    "type": "string"
                  }
                },
                "types": {
                  "type": "array",
                  "description": "Types of workflow run events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "completed",
                      "requested",
                      "in_progress"
                    ]
                  }
                },
                "branches": {
                  "type": "array",
                  "description": "Branches to filter on",
                  "items": {
                    "type": "string"
                  }
                },
                "branches-ignore": {
                  "type": "array",
                  "description": "Branches to ignore",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "release": {
              "description": "Release event trigger",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of release events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "published",
                      "unpublished",
                      "created",
                      "edited",
                      "deleted",
                      "prereleased",
                      "released"
                    ]
                  }
                }
              }
            },
            "pull_request_review_comment": {
              "description": "Pull request review comment event trigger",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of pull request review comment events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "created",
                      "edited",
                      "deleted"
                    ]
                  }
                }
              }
            },
            "branch_protection_rule": {
              "description": "Branch protection rule event trigger that runs when branch protection rules are changed",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of branch protection rule events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "created",
                      "edited",
                      "deleted"
                    ]
                  }
                }
              }
            },
            "check_run": {
              "description": "Check run event trigger that runs when a check run is created, rerequested, completed, or has a requested action",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of check run events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "created",
                      "rerequested",
                      "completed",
                      "requested_action"
                    ]
                  }
                }
              }
            },
            "check_suite": {
              "description": "Check suite event trigger that runs when check suite activity occurs",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of check suite events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "completed"
                    ]
                  }
                }
              }
            },
            "create": {
              "description": "Create event trigger that runs when a Git reference (branch or tag) is created",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple create event trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "delete": {
              "description": "Delete event trigger that runs when a Git reference (branch or tag) is deleted",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple delete event trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "deployment": {
              "description": "Deployment event trigger that runs when a deployment is created",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple deployment event trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "deployment_status": {
              "description": "Deployment status event trigger that runs when a deployment status is updated",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple deployment status event trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "fork": {
              "description": "Fork event trigger that runs when someone forks the repository",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple fork event trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "gollum": {
              "description": "Gollum event trigger that runs when someone creates or updates a Wiki page",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple gollum event trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "label": {
              "description": "Label event trigger that runs when a label is created, edited, or deleted",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of label events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "created",
                      "edited",
                      "deleted"
                    ]
                  }
                }
              }
            },
            "merge_group": {
              "description": "Merge group event trigger that runs when a pull request is added to a merge queue",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of merge group events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "checks_requested"
                    ]
                  }
                }
              }
            },
            "milestone": {
              "description": "Milestone event trigger that runs when a milestone is created, closed, opened, edited, or deleted",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of milestone events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "created",
                      "closed",
                      "opened",
                      "edited",
                      "deleted"
                    ]
                  }
                }
              }
            },
            "page_build": {
              "description": "Page build event trigger that runs when someone pushes to a GitHub Pages publishing source branch",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple page build event trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "public": {
              "description": "Public event trigger that runs when a repository changes from private to public",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple public event trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "pull_request_target": {
              "description": "Pull request target event trigger that runs in the context of the base repository (secure for fork PRs)",
              "type": "object",
              "properties": {
                "types": {
                  "type": "array",
                  "description": "List of pull request target event types to trigger on",
                  "items": {
                    "type": "string",
                    "enum": [
                      "assigned",
                      "unassigned",
                      "labeled",
                      "unlabeled",
                      "opened",
                      "edited",
                      "closed",
                      "reopened",
                      "synchronize",
                      "converted_to_draft",
                      "locked",
                      "unlocked",
                      "enqueued",
                      "dequeued",
                      "review_requested",
                      "review_request_removed",
                      "auto_merge_enabled",
                      "auto_merge_disabled"
                    ]
                  }
                },
                "branches": {
                  "type": "array",
                  "description": "Branches to filter on",
                  "items": {
                    "type": "string"
                  }
                },
                "branches-ignore": {
                  "type": "array",
                  "description": "Branches to ignore",
                  "items": {
                    "type": "string"
                  }
                },
                "paths": {
                  "type": "array",
                  "description": "Paths to filter on",
                  "items": {
                    "type": "string"
                  }
                },
                "paths-ignore": {
                  "type": "array",
                  "description": "Paths to ignore",
                  "items": {
                    "type": "string"
                  }
                },
                "draft": {
                  "type": "boolean",
                  "description": "Filter by draft pull request state"
                },
                "forks": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Single fork pattern"
                    },
                    {
                      "type": "array",
                      "description": "List of allowed fork repositories with glob support",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            "pull_request_review": {
              "description": "Pull request review event trigger that runs when a pull request review is submitted, edited, or dismissed",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of pull request review events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "submitted",
                      "edited",
                      "dismissed"
                    ]
                  }
                }
              }
            },
            "registry_package": {
              "description": "Registry package event trigger that runs when a package is published or updated",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of registry package events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "published",
                      "updated"
                    ]
                  }
                }
              }
            },
            "repository_dispatch": {
              "description": "Repository dispatch event trigger for custom webhook events",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Custom event types to trigger on",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "status": {
              "description": "Status event trigger that runs when the status of a Git commit changes",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple status event trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "watch": {
              "description": "Watch event trigger that runs when someone stars the repository",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "types": {
                  "type": "array",
                  "description": "Types of watch events",
                  "items": {
                    "type": "string",
                    "enum": [
                      "started"
                    ]
                  }
                }
              }
            },
            "workflow_call": {
              "description": "Workflow call event trigger that allows this workflow to be called by another workflow",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Simple workflow call event trigger"
                },
                {
                  "type": "object",
                  "additionalProperties": false
                }
              ]
            },
            "stop-after": {
              "type": "string",
              "description": "Time when workflow should stop running. Supports multiple formats: absolute dates (YYYY-MM-DD HH:MM:SS, June 1 2025, 1st June 2025, 06/01/2025, etc.) or relative time deltas (+25h, +3d, +1d12h30m)"
            },
            "reaction": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ],
              "default": "eyes",
              "description": "AI reaction to add/remove on triggering item (one of: +1, -1, laugh, confused, heart, hooray, rocket, eyes). Defaults to 'eyes' if not specified."
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "permissions": {
      "description": "GitHub token permissions for the workflow. Controls what the GITHUB_TOKEN can access during execution. Use the principle of least privilege - only grant the minimum permissions needed.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "read-all",
            "write-all",
            "read",
            "write"
          ],
          "description": "Simple permissions string: 'read-all' (all read permissions), 'write-all' (all write permissions), 'read' or 'write' (basic level)"
        },
        {
          "type": "object",
          "description": "Detailed permissions object with granular control over specific GitHub API scopes",
          "additionalProperties": false,
          "properties": {
            "actions": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ],
              "description": "Permission for GitHub Actions workflows and runs (read: view workflows, write: manage workflows, none: no access)"
            },
            "attestations": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ],
              "description": "Permission for artifact attestations (read: view attestations, write: create attestations, none: no access)"
            },
            "checks": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ],
              "description": "Permission for repository checks and status checks (read: view checks, write: create/update checks, none: no access)"
            },
            "contents": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ],
              "description": "Permission for repository contents (read: view files, write: modify files/branches, none: no access)"
            },
            "deployments": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ],
              "description": "Permission for repository deployments (read: view deployments, write: create/update deployments, none: no access)"
            },
            "discussions": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ],
              "description": "Permission for repository discussions (read: view discussions, write: create/update discussions, none: no access)"
            },
            "id-token": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ]
            },
            "issues": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ],
              "description": "Permission for repository issues (read: view issues, write: create/update/close issues, none: no access)"
            },
            "models": {
              "type": "string",
              "enum": [
                "read",
                "none"
              ],
              "description": "Permission for GitHub Copilot models (read: access AI models for agentic workflows, none: no access)"
            },
            "packages": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ]
            },
            "pages": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ]
            },
            "pull-requests": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ]
            },
            "repository-projects": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ]
            },
            "security-events": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ]
            },
            "statuses": {
              "type": "string",
              "enum": [
                "read",
                "write",
                "none"
              ]
            },
            "all": {
              "type": "string",
              "enum": [
                "read"
              ],
              "description": "Permission shorthand that applies read access to all permission scopes. Can be combined with specific write permissions to override individual scopes. 'write' is not allowed for all."
            }
          }
        }
      ]
    },
    "run-name": {
      "type": "string",
      "description": "Custom name for workflow runs that appears in the GitHub Actions interface (supports GitHub expressions like ${{ github.event.issue.title }})"
    },
    "jobs": {
      "type": "object",
      "description": "Groups together all the jobs that run in the workflow",
      "additionalProperties": {
        "type": "object",
        "description": "Job definition",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the job"
          },
          "runs-on": {
            "oneOf": [
              {
                "type": "string",
                "description": "Runner type as string"
              },
              {
                "type": "array",
                "description": "Runner type as array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "object",
                "description": "Runner type as object",
                "additionalProperties": false
              }
            ]
          },
          "steps": {
            "type": "array",
            "description": "Job steps",
            "items": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "if": {
            "type": "string",
            "description": "Conditional execution for the job"
          },
          "needs": {
            "oneOf": [
              {
                "type": "string",
                "description": "Single job dependency"
              },
              {
                "type": "array",
                "description": "Multiple job dependencies",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "env": {
            "type": "object",
            "description": "Environment variables for the job",
            "additionalProperties": {
              "type": "string"
            }
          },
          "permissions": {
            "$ref": "#/properties/permissions"
          },
          "timeout-minutes": {
            "type": "integer",
            "description": "Job timeout in minutes"
          },
          "strategy": {
            "type": "object",
            "description": "Matrix strategy for the job",
            "additionalProperties": false
          },
          "continue-on-error": {
            "type": "boolean",
            "description": "Continue workflow on job failure"
          },
          "container": {
            "type": "object",
            "description": "Container to run the job in",
            "additionalProperties": false
          },
          "services": {
            "type": "object",
            "description": "Service containers for the job",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "outputs": {
            "type": "object",
            "description": "Job outputs",
            "additionalProperties": {
              "type": "string"
            }
          },
          "concurrency": {
            "$ref": "#/properties/concurrency"
          }
        }
      }
    },
    "runs-on": {
      "oneOf": [
        {
          "type": "string",
          "description": "Runner type as string"
        },
        {
          "type": "array",
          "description": "Runner type as array",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "object",
          "description": "Runner type as object",
          "additionalProperties": false,
          "properties": {
            "group": {
              "type": "string",
              "description": "Runner group name for self-hosted runners"
            },
            "labels": {
              "type": "array",
              "description": "List of runner labels for self-hosted runners",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "timeout_minutes": {
      "type": "integer",
      "description": "Workflow timeout in minutes. Defaults to 15 minutes for agentic workflows. Has sensible defaults and can typically be omitted."
    },
    "concurrency": {
      "oneOf": [
        {
          "type": "string",
          "description": "Simple concurrency group name to prevent multiple runs. Agentic workflows automatically generate enhanced concurrency policies."
        },
        {
          "type": "object",
          "description": "Concurrency configuration object with group isolation and cancellation control",
          "additionalProperties": false,
          "properties": {
            "group": {
              "type": "string",
              "description": "Concurrency group name. Workflows in the same group cannot run simultaneously."
            },
            "cancel-in-progress": {
              "type": "boolean",
              "description": "Whether to cancel in-progress workflows in the same concurrency group when a new one starts"
            }
          },
          "required": [
            "group"
          ]
        }
      ]
    },
    "env": {
      "description": "Environment variables for the workflow",
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        {
          "type": "string"
        }
      ]
    },
    "features": {
      "description": "Feature flags to enable experimental or optional features in the workflow. Each feature is specified as a key with a boolean value.",
      "type": "object",
      "additionalProperties": {
        "type": "boolean"
      }
    },
    "environment": {
      "description": "Environment that the job references (for protected environments and deployments)",
      "oneOf": [
        {
          "type": "string",
          "description": "Environment name as a string"
        },
        {
          "type": "object",
          "description": "Environment object with name and optional URL",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the environment configured in the repo"
            },
            "url": {
              "type": "string",
              "description": "A deployment URL"
            }
          },
          "required": [
            "name"
          ],
          "additionalProperties": false
        }
      ]
    },
    "container": {
      "description": "Container to run the job steps in",
      "oneOf": [
        {
          "type": "string",
          "description": "Docker image name (e.g., 'node:18', 'ubuntu:latest')"
        },
        {
          "type": "object",
          "description": "Container configuration object",
          "properties": {
            "image": {
              "type": "string",
              "description": "The Docker image to use as the container"
            },
            "credentials": {
              "type": "object",
              "description": "Credentials for private registries",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "env": {
              "type": "object",
              "description": "Environment variables for the container",
              "additionalProperties": {
                "type": "string"
              }
            },
            "ports": {
              "type": "array",
              "description": "Ports to expose on the container",
              "items": {
                "oneOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "volumes": {
              "type": "array",
              "description": "Volumes for the container",
              "items": {
                "type": "string"
              }
            },
            "options": {
              "type": "string",
              "description": "Additional Docker container options"
            }
          },
          "required": [
            "image"
          ],
          "additionalProperties": false
        }
      ]
    },
    "services": {
      "description": "Service containers for the job",
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "type": "string",
            "description": "Docker image name for the service"
          },
          {
            "type": "object",
            "description": "Service container configuration",
            "properties": {
              "image": {
                "type": "string",
                "description": "The Docker image to use for the service"
              },
              "credentials": {
                "type": "object",
                "description": "Credentials for private registries",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              },
              "env": {
                "type": "object",
                "description": "Environment variables for the service",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "ports": {
                "type": "array",
                "description": "Ports to expose on the service",
                "items": {
                  "oneOf": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              },
              "volumes": {
                "type": "array",
                "description": "Volumes for the service",
                "items": {
                  "type": "string"
                }
              },
              "options": {
                "type": "string",
                "description": "Additional Docker container options"
              }
            },
            "required": [
              "image"
            ],
            "additionalProperties": false
          }
        ]
      }
    },
    "network": {
      "description": "Network access control for AI engines using ecosystem identifiers and domain allowlists. Controls web fetch and search capabilities.",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "defaults"
          ],
          "description": "Use default network permissions (basic infrastructure: certificates, JSON schema, Ubuntu, etc.)"
        },
        {
          "type": "object",
          "description": "Custom network access configuration with ecosystem identifiers and specific domains",
          "properties": {
            "allowed": {
              "type": "array",
              "description": "List of allowed domains or ecosystem identifiers (e.g., 'defaults', 'python', 'node', '*.example.com')",
              "items": {
                "type": "string",
                "description": "Domain name or ecosystem identifier (supports wildcards like '*.example.com' and ecosystem names like 'python', 'node')"
              }
            },
            "firewall": {
              "description": "AWF (Agent Workflow Firewall) configuration for network egress control. Only supported for Copilot engine.",
              "oneOf": [
                {
                  "type": "null",
                  "description": "Enable AWF with default settings (equivalent to empty object)"
                },
                {
                  "type": "boolean",
                  "description": "Enable (true) or explicitly disable (false) AWF firewall"
                },
                {
                  "type": "string",
                  "enum": [
                    "disable"
                  ],
                  "description": "Disable AWF firewall (triggers warning if allowed != *, error in strict mode if allowed is not * or engine does not support firewall)"
                },
                {
                  "type": "object",
                  "description": "Custom AWF configuration with version and arguments",
                  "properties": {
                    "args": {
                      "type": "array",
                      "description": "Optional additional arguments to pass to AWF wrapper",
                      "items": {
                        "type": "string"
                      }
                    },
                    "version": {
                      "type": "string",
                      "description": "AWF version to use (empty = latest release)"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "if": {
      "type": "string",
      "description": "Conditional execution expression"
    },
    "steps": {
      "description": "Custom workflow steps",
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": true
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "additionalProperties": true
              }
            ]
          }
        }
      ]
    },
    "post-steps": {
      "description": "Custom workflow steps to run after AI execution",
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": true
        },
        {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "additionalProperties": true
              }
            ]
          }
        }
      ]
    },
    "engine": {
      "description": "AI engine configuration that specifies which AI processor interprets and executes the markdown content of the workflow. Defaults to 'claude'.",
      "$ref": "#/$defs/engine_config"
    },
    "mcp-servers": {
      "type": "object",
      "description": "MCP server definitions",
      "patternProperties": {
        "^[a-zA-Z0-9_-]+$": {
          "oneOf": [
            {
              "$ref": "#/$defs/stdio_mcp_tool"
            },
            {
              "$ref": "#/$defs/http_mcp_tool"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "tools": {
      "type": "object",
      "description": "Tools and MCP (Model Context Protocol) servers available to the AI engine for GitHub API access, browser automation, file editing, and more",
      "properties": {
        "github": {
          "description": "GitHub API tools for repository operations (issues, pull requests, content management)",
          "oneOf": [
            {
              "type": "null",
              "description": "Empty GitHub tool configuration (enables all read-only GitHub API functions)"
            },
            {
              "type": "string",
              "description": "Simple GitHub tool configuration (enables all GitHub API functions)"
            },
            {
              "type": "object",
              "description": "GitHub tools object configuration with restricted function access",
              "properties": {
                "allowed": {
                  "type": "array",
                  "description": "List of allowed GitHub API functions (e.g., 'create_issue', 'update_issue', 'add_comment')",
                  "items": {
                    "type": "string"
                  }
                },
                "mode": {
                  "type": "string",
                  "enum": [
                    "local",
                    "remote"
                  ],
                  "description": "MCP server mode: 'local' (Docker-based, default) or 'remote' (hosted at api.githubcopilot.com)"
                },
                "version": {
                  "type": "string",
                  "description": "Optional version specification for the GitHub MCP server (used with 'local' type)"
                },
                "args": {
                  "type": "array",
                  "description": "Optional additional arguments to append to the generated MCP server command (used with 'local' type)",
                  "items": {
                    "type": "string"
                  }
                },
                "read-only": {
                  "type": "boolean",
                  "description": "Enable read-only mode to restrict GitHub MCP server to read-only operations only"
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "Optional custom GitHub token (e.g., '${{ secrets.CUSTOM_PAT }}'). For 'remote' type, defaults to GH_AW_GITHUB_TOKEN if not specified."
                },
                "toolset": {
                  "type": "array",
                  "description": "Array of GitHub MCP server toolset names to enable specific groups of GitHub API functionalities",
                  "items": {
                    "type": "string",
                    "description": "Toolset name",
                    "enum": [
                      "all",
                      "default",
                      "context",
                      "repos",
                      "issues",
                      "pull_requests",
                      "actions",
                      "code_security",
                      "dependabot",
                      "discussions",
                      "experiments",
                      "gists",
                      "labels",
                      "notifications",
                      "orgs",
                      "projects",
                      "secret_protection",
                      "security_advisories",
                      "stargazers",
                      "users"
                    ]
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "bash": {
          "description": "Bash shell command execution tool for running command-line programs and scripts",
          "oneOf": [
            {
              "type": "null",
              "description": "Enable bash tool with all shell commands allowed (security consideration: use restricted list in production)"
            },
            {
              "type": "boolean",
              "description": "Enable bash tool - true allows all commands (equivalent to ['*']), false disables the tool"
            },
            {
              "type": "array",
              "description": "List of allowed bash commands and patterns (e.g., ['echo', 'ls', 'git status', 'npm install'])",
              "items": {
                "type": "string"
              }
            }
          ]
        },
        "web-fetch": {
          "description": "Web content fetching tool for downloading web pages and API responses (subject to network permissions)",
          "oneOf": [
            {
              "type": "null",
              "description": "Enable web fetch tool with default configuration"
            },
            {
              "type": "object",
              "description": "Web fetch tool configuration object",
              "additionalProperties": false
            }
          ]
        },
        "web-search": {
          "description": "Web search tool for performing internet searches and retrieving search results (subject to network permissions)",
          "oneOf": [
            {
              "type": "null",
              "description": "Enable web search tool with default configuration"
            },
            {
              "type": "object",
              "description": "Web search tool configuration object",
              "additionalProperties": false
            }
          ]
        },
        "edit": {
          "description": "File editing tool for reading, creating, and modifying files in the repository",
          "oneOf": [
            {
              "type": "null",
              "description": "Enable edit tool"
            },
            {
              "type": "object",
              "description": "Edit tool configuration object",
              "additionalProperties": false
            }
          ]
        },
        "playwright": {
          "description": "Playwright browser automation tool for web scraping, testing, and UI interactions in containerized browsers",
          "oneOf": [
            {
              "type": "null",
              "description": "Enable Playwright tool with default settings (localhost access only for security)"
            },
            {
              "type": "object",
              "description": "Playwright tool configuration with custom version and domain restrictions",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "Optional Playwright container version (e.g., 'v1.41.0')"
                },
                "allowed_domains": {
                  "description": "Domains allowed for Playwright browser network access. Defaults to localhost only for security.",
                  "oneOf": [
                    {
                      "type": "array",
                      "description": "List of allowed domains or patterns (e.g., ['github.com', '*.example.com'])",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "string",
                      "description": "Single allowed domain (e.g., 'github.com')"
                    }
                  ]
                },
                "args": {
                  "type": "array",
                  "description": "Optional additional arguments to append to the generated MCP server command",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "agentic-workflows": {
          "description": "GitHub Agentic Workflows MCP server for workflow introspection and analysis. Provides tools for checking status, compiling workflows, downloading logs, and auditing runs.",
          "oneOf": [
            {
              "type": "boolean",
              "description": "Enable agentic-workflows tool with default settings"
            },
            {
              "type": "null",
              "description": "Enable agentic-workflows tool with default settings (same as true)"
            }
          ]
        },
        "cache-memory": {
          "description": "Cache memory MCP configuration for persistent memory storage",
          "oneOf": [
            {
              "type": "boolean",
              "description": "Enable cache-memory with default settings"
            },
            {
              "type": "null",
              "description": "Enable cache-memory with default settings (same as true)"
            },
            {
              "type": "object",
              "description": "Cache-memory configuration object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Custom cache key for memory MCP data (restore keys are auto-generated by splitting on '-')"
                },
                "description": {
                  "type": "string",
                  "description": "Optional description for the cache that will be shown in the agent prompt"
                },
                "docker-image": {
                  "type": "string",
                  "description": "Docker image to use for the memory MCP server (default: mcp/memory)"
                },
                "retention-days": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 90,
                  "description": "Number of days to retain uploaded artifacts (1-90 days, default: repository setting)"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "array",
              "description": "Array of cache-memory configurations for multiple caches",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Cache identifier (required for array notation, default: 'default')"
                  },
                  "key": {
                    "type": "string",
                    "description": "Custom cache key for this memory cache (restore keys are auto-generated by splitting on '-')"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description for this cache that will be shown in the agent prompt"
                  },
                  "retention-days": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 90,
                    "description": "Number of days to retain uploaded artifacts (1-90 days, default: repository setting)"
                  }
                },
                "additionalProperties": false
              },
              "minItems": 1
            }
          ]
        },
        "safety-prompt": {
          "type": "boolean",
          "description": "Enable or disable XPIA (Cross-Prompt Injection Attack) security warnings in the prompt. Defaults to true (enabled). Set to false to disable security warnings."
        },
        "timeout": {
          "type": "integer",
          "minimum": 1,
          "description": "Timeout in seconds for tool/MCP server operations. Applies to all tools and MCP servers if supported by the engine. Default varies by engine (Claude: 60s, Codex: 120s)."
        },
        "startup-timeout": {
          "type": "integer",
          "minimum": 1,
          "description": "Timeout in seconds for MCP server startup. Applies to MCP server initialization if supported by the engine. Default: 120 seconds."
        }
      },
      "additionalProperties": {
        "description": "Simple tool string",
        "type": "string"
      }
    },
    "command": {
      "type": "string",
      "description": "Command name for the workflow"
    },
    "cache": {
      "description": "Cache configuration for workflow (uses actions/cache syntax)",
      "oneOf": [
        {
          "type": "object",
          "description": "Single cache configuration",
          "properties": {
            "key": {
              "type": "string",
              "description": "An explicit key for restoring and saving the cache"
            },
            "path": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "A single path to cache"
                },
                {
                  "type": "array",
                  "description": "Multiple paths to cache",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "restore-keys": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "A single restore key"
                },
                {
                  "type": "array",
                  "description": "Multiple restore keys",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "upload-chunk-size": {
              "type": "integer",
              "description": "The chunk size used to split up large files during upload, in bytes"
            },
            "fail-on-cache-miss": {
              "type": "boolean",
              "description": "Fail the workflow if cache entry is not found"
            },
            "lookup-only": {
              "type": "boolean",
              "description": "If true, only checks if cache entry exists and skips download"
            }
          },
          "required": [
            "key",
            "path"
          ],
          "additionalProperties": false
        },
        {
          "type": "array",
          "description": "Multiple cache configurations",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "description": "An explicit key for restoring and saving the cache"
              },
              "path": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "A single path to cache"
                  },
                  {
                    "type": "array",
                    "description": "Multiple paths to cache",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "restore-keys": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "A single restore key"
                  },
                  {
                    "type": "array",
                    "description": "Multiple restore keys",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "upload-chunk-size": {
                "type": "integer",
                "description": "The chunk size used to split up large files during upload, in bytes"
              },
              "fail-on-cache-miss": {
                "type": "boolean",
                "description": "Fail the workflow if cache entry is not found"
              },
              "lookup-only": {
                "type": "boolean",
                "description": "If true, only checks if cache entry exists and skips download"
              }
            },
            "required": [
              "key",
              "path"
            ],
            "additionalProperties": false
          }
        }
      ]
    },
    "safe-outputs": {
      "type": "object",
      "description": "Safe output processing configuration that automatically creates GitHub issues, comments, and pull requests from AI workflow output without requiring write permissions in the main job",
      "properties": {
        "allowed-domains": {
          "type": "array",
          "description": "List of allowed domains for URI filtering in AI workflow output. URLs from other domains will be replaced with '(redacted)' for security.",
          "items": {
            "type": "string"
          }
        },
        "create-issue": {
          "oneOf": [
            {
              "type": "object",
              "description": "Configuration for automatically creating GitHub issues from AI workflow output. The main job does not need 'issues: write' permission.",
              "properties": {
                "title-prefix": {
                  "type": "string",
                  "description": "Optional prefix to add to the beginning of the issue title (e.g., '[ai] ' or '[analysis] ')"
                },
                "labels": {
                  "type": "array",
                  "description": "Optional list of labels to automatically attach to created issues (e.g., ['automation', 'ai-generated'])",
                  "items": {
                    "type": "string"
                  }
                },
                "assignees": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Single GitHub username to assign the created issue to (e.g., 'user1' or 'copilot'). Use 'copilot' to assign to GitHub Copilot using the @copilot special value."
                    },
                    {
                      "type": "array",
                      "description": "List of GitHub usernames to assign the created issue to (e.g., ['user1', 'user2', 'copilot']). Use 'copilot' to assign to GitHub Copilot using the @copilot special value.",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                },
                "max": {
                  "type": "integer",
                  "description": "Maximum number of issues to create (default: 1)",
                  "minimum": 1,
                  "maximum": 100
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum number of issues to create (default: 0 - no requirement)",
                  "minimum": 0,
                  "maximum": 100
                },
                "target-repo": {
                  "type": "string",
                  "description": "Target repository in format 'owner/repo' for cross-repository issue creation. Takes precedence over trial target repo settings."
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "Enable issue creation with default configuration"
            }
          ]
        },
        "create-agent-task": {
          "oneOf": [
            {
              "type": "object",
              "description": "Configuration for creating GitHub Copilot agent tasks from agentic workflow output using gh agent-task CLI. The main job does not need write permissions.",
              "properties": {
                "base": {
                  "type": "string",
                  "description": "Base branch for the agent task pull request. Defaults to the current branch or repository default branch."
                },
                "max": {
                  "type": "integer",
                  "description": "Maximum number of agent tasks to create (default: 1)",
                  "minimum": 1,
                  "maximum": 1
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum number of agent tasks to create (default: 0 - no requirement)",
                  "minimum": 0,
                  "maximum": 1
                },
                "target-repo": {
                  "type": "string",
                  "description": "Target repository in format 'owner/repo' for cross-repository agent task creation. Takes precedence over trial target repo settings."
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "Enable agent task creation with default configuration"
            }
          ]
        },
        "create-discussion": {
          "oneOf": [
            {
              "type": "object",
              "description": "Configuration for creating GitHub discussions from agentic workflow output",
              "properties": {
                "title-prefix": {
                  "type": "string",
                  "description": "Optional prefix for the discussion title"
                },
                "category": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Discussion category name or ID"
                    },
                    {
                      "type": "number",
                      "description": "Discussion category ID as a number"
                    }
                  ],
                  "description": "Optional discussion category. Can be a category ID (string or number), category name, or category slug/route. If not specified, uses the first available category. Matched first against category IDs, then against category names, then against category slugs."
                },
                "max": {
                  "type": "integer",
                  "description": "Maximum number of discussions to create (default: 1)",
                  "minimum": 1,
                  "maximum": 100
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum number of discussions to create (default: 0 - no requirement)",
                  "minimum": 0,
                  "maximum": 100
                },
                "target-repo": {
                  "type": "string",
                  "description": "Target repository in format 'owner/repo' for cross-repository discussion creation. Takes precedence over trial target repo settings."
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "Enable discussion creation with default configuration"
            }
          ]
        },
        "add-comment": {
          "oneOf": [
            {
              "type": "object",
              "description": "Configuration for automatically creating GitHub issue or pull request comments from AI workflow output. The main job does not need write permissions.",
              "properties": {
                "max": {
                  "type": "integer",
                  "description": "Maximum number of comments to create (default: 1)",
                  "minimum": 1,
                  "maximum": 100
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum number of comments to create (default: 0 - no requirement)",
                  "minimum": 0,
                  "maximum": 100
                },
                "target": {
                  "type": "string",
                  "description": "Target for comments: 'triggering' (default), '*' (any issue), or explicit issue number"
                },
                "target-repo": {
                  "type": "string",
                  "description": "Target repository in format 'owner/repo' for cross-repository comments. Takes precedence over trial target repo settings."
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                },
                "discussion": {
                  "type": "boolean",
                  "const": true,
                  "description": "Target discussion comments instead of issue/PR comments. Must be true if present."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "Enable issue comment creation with default configuration"
            }
          ]
        },
        "create-pull-request": {
          "oneOf": [
            {
              "type": "object",
              "description": "Configuration for creating GitHub pull requests from agentic workflow output",
              "properties": {
                "title-prefix": {
                  "type": "string",
                  "description": "Optional prefix for the pull request title"
                },
                "labels": {
                  "type": "array",
                  "description": "Optional list of labels to attach to the pull request",
                  "items": {
                    "type": "string"
                  }
                },
                "reviewers": {
                  "oneOf": [
                    {
                      "type": "string",
                      "description": "Single reviewer username to assign to the pull request. Use 'copilot' to request a code review from GitHub Copilot using the copilot-pull-request-reviewer[bot]."
                    },
                    {
                      "type": "array",
                      "description": "List of reviewer usernames to assign to the pull request. Use 'copilot' to request a code review from GitHub Copilot using the copilot-pull-request-reviewer[bot].",
                      "items": {
                        "type": "string"
                      }
                    }
                  ],
                  "description": "Optional reviewer(s) to assign to the pull request. Accepts either a single string or an array of usernames. Use 'copilot' to request a code review from GitHub Copilot."
                },
                "draft": {
                  "type": "boolean",
                  "description": "Whether to create pull request as draft (defaults to true)"
                },
                "if-no-changes": {
                  "type": "string",
                  "enum": [
                    "warn",
                    "error",
                    "ignore"
                  ],
                  "description": "Behavior when no changes to push: 'warn' (default - log warning but succeed), 'error' (fail the action), or 'ignore' (silent success)"
                },
                "target-repo": {
                  "type": "string",
                  "description": "Target repository in format 'owner/repo' for cross-repository pull request creation. Takes precedence over trial target repo settings."
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "Enable pull request creation with default configuration"
            }
          ]
        },
        "create-pull-request-review-comment": {
          "oneOf": [
            {
              "type": "object",
              "description": "Configuration for creating GitHub pull request review comments from agentic workflow output",
              "properties": {
                "max": {
                  "type": "integer",
                  "description": "Maximum number of review comments to create (default: 1)",
                  "minimum": 1,
                  "maximum": 100
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum number of review comments to create (default: 0 - no requirement)",
                  "minimum": 0,
                  "maximum": 100
                },
                "side": {
                  "type": "string",
                  "description": "Side of the diff for comments: 'LEFT' or 'RIGHT' (default: 'RIGHT')",
                  "enum": [
                    "LEFT",
                    "RIGHT"
                  ]
                },
                "target": {
                  "type": "string",
                  "description": "Target for review comments: 'triggering' (default, only on triggering PR), '*' (any PR, requires pull_request_number in agent output), or explicit PR number"
                },
                "target-repo": {
                  "type": "string",
                  "description": "Target repository in format 'owner/repo' for cross-repository PR review comments. Takes precedence over trial target repo settings."
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "Enable PR review comment creation with default configuration"
            }
          ]
        },
        "create-code-scanning-alert": {
          "oneOf": [
            {
              "type": "object",
              "description": "Configuration for creating repository security advisories (SARIF format) from agentic workflow output",
              "properties": {
                "max": {
                  "type": "integer",
                  "description": "Maximum number of security findings to include (default: unlimited)",
                  "minimum": 1
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum number of security findings to include (default: 0 - no requirement)",
                  "minimum": 0,
                  "maximum": 100
                },
                "driver": {
                  "type": "string",
                  "description": "Driver name for SARIF tool.driver.name field (default: 'GitHub Agentic Workflows Security Scanner')"
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "Enable code scanning alert creation with default configuration (unlimited findings)"
            }
          ]
        },
        "add-labels": {
          "oneOf": [
            {
              "type": "null",
              "description": "Null configuration allows any labels"
            },
            {
              "type": "object",
              "description": "Configuration for adding labels to issues/PRs from agentic workflow output",
              "properties": {
                "allowed": {
                  "type": "array",
                  "description": "Optional list of allowed labels that can be added. If omitted, any labels are allowed (including creating new ones).",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                },
                "max": {
                  "type": "integer",
                  "description": "Optional maximum number of labels to add (default: 3)",
                  "minimum": 1
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum number of labels to add (default: 0 - no requirement)",
                  "minimum": 0
                },
                "target": {
                  "type": "string",
                  "description": "Target for labels: 'triggering' (default), '*' (any issue/PR), or explicit issue/PR number"
                },
                "target-repo": {
                  "type": "string",
                  "description": "Target repository in format 'owner/repo' for cross-repository label addition. Takes precedence over trial target repo settings."
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "update-issue": {
          "oneOf": [
            {
              "type": "object",
              "description": "Configuration for updating GitHub issues from agentic workflow output",
              "properties": {
                "status": {
                  "type": "null",
                  "description": "Allow updating issue status (open/closed) - presence of key indicates field can be updated"
                },
                "target": {
                  "type": "string",
                  "description": "Target for updates: 'triggering' (default), '*' (any issue), or explicit issue number"
                },
                "title": {
                  "type": "null",
                  "description": "Allow updating issue title - presence of key indicates field can be updated"
                },
                "body": {
                  "type": "null",
                  "description": "Allow updating issue body - presence of key indicates field can be updated"
                },
                "max": {
                  "type": "integer",
                  "description": "Maximum number of issues to update (default: 1)",
                  "minimum": 1,
                  "maximum": 100
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum number of issues to update (default: 0 - no requirement)",
                  "minimum": 0,
                  "maximum": 100
                },
                "target-repo": {
                  "type": "string",
                  "description": "Target repository in format 'owner/repo' for cross-repository issue updates. Takes precedence over trial target repo settings."
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "Enable issue updating with default configuration"
            }
          ]
        },
        "push-to-pull-request-branch": {
          "oneOf": [
            {
              "type": "null",
              "description": "Use default configuration (branch: 'triggering', if-no-changes: 'warn')"
            },
            {
              "type": "object",
              "description": "Configuration for pushing changes to a specific branch from agentic workflow output",
              "properties": {
                "branch": {
                  "type": "string",
                  "description": "The branch to push changes to (defaults to 'triggering')"
                },
                "target": {
                  "type": "string",
                  "description": "Target for push operations: 'triggering' (default), '*' (any pull request), or explicit pull request number"
                },
                "title-prefix": {
                  "type": "string",
                  "description": "Required prefix for pull request title. Only pull requests with this prefix will be accepted."
                },
                "labels": {
                  "type": "array",
                  "description": "Required labels for pull request validation. Only pull requests with all these labels will be accepted.",
                  "items": {
                    "type": "string"
                  }
                },
                "if-no-changes": {
                  "type": "string",
                  "enum": [
                    "warn",
                    "error",
                    "ignore"
                  ],
                  "description": "Behavior when no changes to push: 'warn' (default - log warning but succeed), 'error' (fail the action), or 'ignore' (silent success)"
                },
                "commit-title-suffix": {
                  "type": "string",
                  "description": "Optional suffix to append to generated commit titles (e.g., ' [skip ci]' to prevent triggering CI on the commit)"
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "missing-tool": {
          "oneOf": [
            {
              "type": "object",
              "description": "Configuration for reporting missing tools from agentic workflow output",
              "properties": {
                "max": {
                  "type": "integer",
                  "description": "Maximum number of missing tool reports (default: unlimited)",
                  "minimum": 1
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum number of missing tool reports (default: 0 - no requirement)",
                  "minimum": 0,
                  "maximum": 100
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "Enable missing tool reporting with default configuration"
            },
            {
              "type": "boolean",
              "const": false,
              "description": "Explicitly disable missing tool reporting (false). Missing tool reporting is enabled by default when safe-outputs is configured."
            }
          ]
        },
        "upload-assets": {
          "oneOf": [
            {
              "type": "object",
              "description": "Configuration for publishing assets to an orphaned git branch",
              "properties": {
                "branch": {
                  "type": "string",
                  "description": "Branch name (default: 'assets/${{ github.workflow }}')",
                  "default": "assets/${{ github.workflow }}"
                },
                "max-size": {
                  "type": "integer",
                  "description": "Maximum file size in KB (default: 10240 = 10MB)",
                  "minimum": 1,
                  "maximum": 51200,
                  "default": 10240
                },
                "allowed-exts": {
                  "type": "array",
                  "description": "Allowed file extensions (default: common non-executable types)",
                  "items": {
                    "type": "string",
                    "pattern": "^\\.[a-zA-Z0-9]+$"
                  }
                },
                "max": {
                  "type": "integer",
                  "description": "Maximum number of assets to upload (default: 10)",
                  "minimum": 1,
                  "maximum": 100
                },
                "min": {
                  "type": "integer",
                  "description": "Minimum number of assets to upload (default: 0 - no requirement)",
                  "minimum": 0,
                  "maximum": 100
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token to use for this specific output type. Overrides global github-token if specified."
                }
              },
              "additionalProperties": false
            },
            {
              "type": "null",
              "description": "Enable asset publishing with default configuration"
            }
          ]
        },
        "staged": {
          "type": "boolean",
          "description": "If true, emit step summary messages instead of making GitHub API calls (preview mode)"
        },
        "env": {
          "type": "object",
          "description": "Environment variables to pass to safe output jobs",
          "patternProperties": {
            "^[A-Za-z_][A-Za-z0-9_]*$": {
              "type": "string",
              "description": "Environment variable value, typically a secret reference like ${{ secrets.TOKEN_NAME }}"
            }
          },
          "additionalProperties": false
        },
        "github-token": {
          "$ref": "#/$defs/github_token",
          "description": "GitHub token to use for safe output jobs. Typically a secret reference like ${{ secrets.GITHUB_TOKEN }} or ${{ secrets.CUSTOM_PAT }}"
        },
        "max-patch-size": {
          "type": "integer",
          "description": "Maximum allowed size for git patches in kilobytes (KB). Defaults to 1024 KB (1 MB). If patch exceeds this size, the job will fail.",
          "minimum": 1,
          "maximum": 10240,
          "default": 1024
        },
        "threat-detection": {
          "oneOf": [
            {
              "type": "boolean",
              "description": "Enable or disable threat detection for safe outputs (defaults to true when safe-outputs are configured)"
            },
            {
              "type": "object",
              "description": "Threat detection configuration object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "Whether threat detection is enabled",
                  "default": true
                },
                "prompt": {
                  "type": "string",
                  "description": "Additional custom prompt instructions to append to threat detection analysis"
                },
                "engine": {
                  "description": "AI engine configuration specifically for threat detection (overrides main workflow engine). Supports same format as main engine field.",
                  "$ref": "#/$defs/engine_config"
                },
                "steps": {
                  "type": "array",
                  "description": "Array of extra job steps to run after detection",
                  "items": {
                    "$ref": "#/properties/githubActionsStep"
                  }
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "jobs": {
          "type": "object",
          "description": "Custom safe-output jobs that can be executed based on agentic workflow output. Job names containing dashes will be automatically normalized to underscores (e.g., 'send-notification' becomes 'send_notification').",
          "patternProperties": {
            "^[a-zA-Z_][a-zA-Z0-9_-]*$": {
              "type": "object",
              "description": "Custom safe-output job configuration. The job name will be normalized to use underscores instead of dashes.",
              "properties": {
                "runs-on": {
                  "description": "Runner specification for this job",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                },
                "if": {
                  "type": "string",
                  "description": "Conditional expression for job execution"
                },
                "needs": {
                  "description": "Job dependencies beyond the main job",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                },
                "env": {
                  "type": "object",
                  "description": "Job-specific environment variables",
                  "patternProperties": {
                    "^[A-Za-z_][A-Za-z0-9_]*$": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "permissions": {
                  "$ref": "#/properties/permissions"
                },
                "github-token": {
                  "$ref": "#/$defs/github_token",
                  "description": "GitHub token for this specific job"
                },
                "output": {
                  "type": "string",
                  "description": "Output configuration for the safe job"
                },
                "inputs": {
                  "type": "object",
                  "description": "Input parameters for the safe job (workflow_dispatch syntax) - REQUIRED: at least one input must be defined",
                  "minProperties": 1,
                  "patternProperties": {
                    "^[a-zA-Z_][a-zA-Z0-9_-]*$": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string",
                          "description": "Input parameter description"
                        },
                        "required": {
                          "type": "boolean",
                          "description": "Whether this input is required",
                          "default": false
                        },
                        "default": {
                          "type": "string",
                          "description": "Default value for the input"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "string",
                            "boolean",
                            "choice"
                          ],
                          "description": "Input parameter type",
                          "default": "string"
                        },
                        "options": {
                          "type": "array",
                          "description": "Available options for choice type inputs",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "steps": {
                  "type": "array",
                  "description": "Custom steps to execute in the safe job",
                  "items": {
                    "$ref": "#/properties/githubActionsStep"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "runs-on": {
          "type": "string",
          "description": "Runner specification for all safe-outputs jobs (activation, create-issue, add-comment, etc.). Single runner label (e.g., 'ubuntu-latest', 'windows-latest', 'self-hosted')"
        }
      },
      "additionalProperties": false
    },
    "roles": {
      "description": "Repository access roles required to trigger agentic workflows. Defaults to ['admin', 'maintainer', 'write'] for security. Use 'all' to allow any authenticated user (\u26a0\ufe0f security consideration).",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "all"
          ],
          "description": "Allow any authenticated user to trigger the workflow (\u26a0\ufe0f disables permission checking entirely - use with caution)"
        },
        {
          "type": "array",
          "description": "List of repository permission levels that can trigger the workflow. Permission checks are automatically applied to potentially unsafe triggers.",
          "items": {
            "type": "string",
            "enum": [
              "admin",
              "maintainer",
              "maintain",
              "write",
              "triage"
            ],
            "description": "Repository permission level: 'admin' (full access), 'maintainer'/'maintain' (repository management), 'write' (push access), 'triage' (issue management)"
          },
          "minItems": 1
        }
      ]
    },
    "githubActionsStep": {
      "type": "object",
      "description": "GitHub Actions workflow step",
      "properties": {
        "name": {
          "type": "string",
          "description": "A name for your step to display on GitHub"
        },
        "id": {
          "type": "string",
          "description": "A unique identifier for the step"
        },
        "if": {
          "type": "string",
          "description": "Conditional expression to determine if step should run"
        },
        "uses": {
          "type": "string",
          "description": "Selects an action to run as part of a step in your job"
        },
        "run": {
          "type": "string",
          "description": "Runs command-line programs using the operating system's shell"
        },
        "with": {
          "type": "object",
          "description": "Input parameters defined by the action",
          "additionalProperties": true
        },
        "env": {
          "type": "object",
          "description": "Environment variables for the step",
          "patternProperties": {
            "^[A-Za-z_][A-Za-z0-9_]*$": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "continue-on-error": {
          "type": "boolean",
          "description": "Prevents a job from failing when a step fails"
        },
        "timeout-minutes": {
          "type": "number",
          "description": "The maximum number of minutes to run the step before killing the process"
        },
        "working-directory": {
          "type": "string",
          "description": "Working directory for the step"
        },
        "shell": {
          "type": "string",
          "description": "Shell to use for the run command"
        }
      },
      "additionalProperties": false,
      "anyOf": [
        {
          "required": [
            "uses"
          ]
        },
        {
          "required": [
            "run"
          ]
        }
      ]
    },
    "strict": {
      "type": "boolean",
      "description": "Enable strict mode validation: require timeout, refuse write permissions, require network configuration. Defaults to false."
    },
    "runtimes": {
      "type": "object",
      "description": "Runtime environment version overrides. Allows customizing runtime versions (e.g., Node.js, Python) or defining new runtimes. Runtimes from imported shared workflows are also merged.",
      "patternProperties": {
        "^[a-z][a-z0-9-]*$": {
          "type": "object",
          "description": "Runtime configuration object identified by runtime ID (e.g., 'node', 'python', 'go')",
          "properties": {
            "version": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "Runtime version as a string (e.g., '22', '3.12', 'latest')"
                },
                {
                  "type": "number",
                  "description": "Runtime version as a number (e.g., 22, 3.12)"
                }
              ]
            },
            "action-repo": {
              "type": "string",
              "description": "GitHub Actions repository for setting up the runtime (e.g., 'actions/setup-node', 'custom/setup-runtime'). Overrides the default setup action."
            },
            "action-version": {
              "type": "string",
              "description": "Version of the setup action to use (e.g., 'v4', 'v5'). Overrides the default action version."
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "github-token": {
      "$ref": "#/$defs/github_token",
      "description": "GitHub token expression to use for all steps that require GitHub authentication. Typically a secret reference like ${{ secrets.GITHUB_TOKEN }} or ${{ secrets.CUSTOM_PAT }}. If not specified, defaults to ${{ secrets.GH_AW_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}. This value can be overridden by safe-outputs github-token or individual safe-output github-token fields."
    }
  },
  "additionalProperties": false,
  "$defs": {
    "engine_config": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "claude",
            "codex",
            "copilot",
            "custom"
          ],
          "description": "Simple engine name: 'claude' (default, Claude Code), 'copilot' (GitHub Copilot CLI), 'codex' (OpenAI Codex CLI), or 'custom' (user-defined steps)"
        },
        {
          "type": "object",
          "description": "Extended engine configuration object with advanced options for model selection, turn limiting, environment variables, and custom steps",
          "properties": {
            "id": {
              "type": "string",
              "enum": [
                "claude",
                "codex",
                "custom",
                "copilot"
              ],
              "description": "AI engine identifier: 'claude' (Claude Code), 'codex' (OpenAI Codex CLI), 'copilot' (GitHub Copilot CLI), or 'custom' (user-defined GitHub Actions steps)"
            },
            "version": {
              "type": "string",
              "description": "Optional version of the AI engine action (e.g., 'beta', 'stable'). Has sensible defaults and can typically be omitted."
            },
            "model": {
              "type": "string",
              "description": "Optional specific LLM model to use (e.g., 'claude-3-5-sonnet-20241022', 'gpt-4'). Has sensible defaults and can typically be omitted."
            },
            "max-turns": {
              "type": "integer",
              "description": "Maximum number of chat iterations per run. Helps prevent runaway loops and control costs. Has sensible defaults and can typically be omitted."
            },
            "concurrency": {
              "oneOf": [
                {
                  "type": "string",
                  "description": "Simple concurrency group name. Gets converted to GitHub Actions concurrency format with the specified group."
                },
                {
                  "type": "object",
                  "description": "GitHub Actions concurrency configuration for the agent job. Controls how many agentic workflow runs can run concurrently.",
                  "properties": {
                    "group": {
                      "type": "string",
                      "description": "Concurrency group identifier. Use GitHub Actions expressions like ${{ github.workflow }} or ${{ github.ref }}. Defaults to 'gh-aw-{engine-id}' if not specified."
                    },
                    "cancel-in-progress": {
                      "type": "boolean",
                      "description": "Whether to cancel in-progress runs of the same concurrency group. Defaults to false for agentic workflow runs."
                    }
                  },
                  "required": [
                    "group"
                  ],
                  "additionalProperties": false
                }
              ],
              "description": "Agent job concurrency configuration. Defaults to single job per engine across all workflows (group: 'gh-aw-{engine-id}'). Supports full GitHub Actions concurrency syntax."
            },
            "user-agent": {
              "type": "string",
              "description": "Custom user agent string for GitHub MCP server configuration (codex engine only)"
            },
            "env": {
              "type": "object",
              "description": "Custom environment variables to pass to the AI engine, including secret overrides (e.g., OPENAI_API_KEY: ${{ secrets.CUSTOM_KEY }})",
              "additionalProperties": {
                "type": "string"
              }
            },
            "steps": {
              "type": "array",
              "description": "Custom GitHub Actions steps for 'custom' engine. Define your own deterministic workflow steps instead of using AI processing.",
              "items": {
                "type": "object",
                "additionalProperties": true
              }
            },
            "error_patterns": {
              "type": "array",
              "description": "Custom error patterns for validating agent logs",
              "items": {
                "type": "object",
                "description": "Error pattern definition",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for this error pattern"
                  },
                  "pattern": {
                    "type": "string",
                    "description": "Ecma script regular expression pattern to match log lines"
                  },
                  "level_group": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Capture group index (1-based) that contains the error level. Use 0 to infer from pattern content."
                  },
                  "message_group": {
                    "type": "integer",
                    "minimum": 0,
                    "description": "Capture group index (1-based) that contains the error message. Use 0 to use the entire match."
                  },
                  "description": {
                    "type": "string",
                    "description": "Human-readable description of what this pattern matches"
                  }
                },
                "required": [
                  "pattern"
                ],
                "additionalProperties": false
              }
            },
            "config": {
              "type": "string",
              "description": "Additional TOML configuration text that will be appended to the generated config.toml in the action (codex engine only)"
            },
            "args": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional array of command-line arguments to pass to the AI engine CLI. These arguments are injected after all other args but before the prompt."
            }
          },
          "required": [
            "id"
          ],
          "additionalProperties": false
        }
      ]
    },
    "stdio_mcp_tool": {
      "type": "object",
      "description": "Stdio MCP tool configuration",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "stdio",
            "local"
          ],
          "description": "MCP connection type for stdio (local is an alias for stdio)"
        },
        "registry": {
          "type": "string",
          "description": "URI to the installation location when MCP is installed from a registry"
        },
        "command": {
          "type": "string",
          "description": "Command for stdio MCP connections"
        },
        "container": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9/:_.-]*$",
          "description": "Container image for stdio MCP connections (alternative to command)"
        },
        "version": {
          "type": "string",
          "description": "Optional version/tag for the container image (e.g., 'latest', 'v1.0.0')"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments for command or container execution"
        },
        "entrypointArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Arguments to add after the container image (container entrypoint arguments)"
        },
        "env": {
          "type": "object",
          "patternProperties": {
            "^[A-Z_][A-Z0-9_]*$": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "description": "Environment variables for MCP server"
        },
        "network": {
          "type": "object",
          "properties": {
            "allowed": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?)*$",
                "description": "Allowed domain name"
              },
              "minItems": 1,
              "uniqueItems": true,
              "description": "List of allowed domain names for network access"
            },
            "proxy-args": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Custom proxy arguments for container-based MCP servers"
            }
          },
          "additionalProperties": false,
          "description": "Network configuration for container-based MCP servers"
        },
        "allowed": {
          "type": "array",
          "description": "List of allowed tool functions",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false,
      "anyOf": [
        {
          "required": [
            "command"
          ]
        },
        {
          "required": [
            "container"
          ]
        }
      ],
      "not": {
        "allOf": [
          {
            "required": [
              "command"
            ]
          },
          {
            "required": [
              "container"
            ]
          }
        ]
      },
      "allOf": [
        {
          "if": {
            "required": [
              "network"
            ]
          },
          "then": {
            "required": [
              "container"
            ]
          }
        }
      ]
    },
    "http_mcp_tool": {
      "type": "object",
      "description": "HTTP MCP tool configuration",
      "properties": {
        "type": {
          "type": "string",
          "const": "http",
          "description": "MCP connection type for HTTP"
        },
        "registry": {
          "type": "string",
          "description": "URI to the installation location when MCP is installed from a registry"
        },
        "url": {
          "type": "string",
          "description": "URL for HTTP MCP connections"
        },
        "headers": {
          "type": "object",
          "patternProperties": {
            "^[A-Za-z0-9_-]+$": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "description": "HTTP headers for HTTP MCP connections"
        },
        "allowed": {
          "type": "array",
          "description": "List of allowed tool functions",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "url"
      ],
      "additionalProperties": false
    },
    "github_token": {
      "type": "string",
      "pattern": "^\\$\\{\\{\\s*secrets\\.[A-Za-z_][A-Za-z0-9_]*(\\s*\\|\\|\\s*secrets\\.[A-Za-z_][A-Za-z0-9_]*)*\\s*\\}\\}$",
      "description": "GitHub token expression using secrets (e.g., ${{ secrets.GITHUB_TOKEN }} or ${{ secrets.CUSTOM_PAT }})",
      "examples": [
        "${{ secrets.GITHUB_TOKEN }}",
        "${{ secrets.CUSTOM_PAT }}",
        "${{ secrets.GH_AW_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}"
      ]
    }
  }
}
